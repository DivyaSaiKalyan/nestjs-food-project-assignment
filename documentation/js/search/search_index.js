var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/entities/Address.html",[0,0.93,1,1.362]],["body/entities/Address.html",[0,1.48,1,2.493,2,1.565,3,0.182,4,0.182,5,0.182,6,2.439,7,0.246,8,1.913,9,4.106,10,3.446,11,1.175,12,0.352,13,1.592,14,4.761,15,4.761,16,4.761,17,2.564,18,4.761,19,4.761,20,4.761,21,0.645,22,0.03,23,1.015,24,2.135,25,4.154,26,0.965,27,2.906,28,2.906,29,2.906,30,2.027,31,2.815,32,2.906,33,2.906,34,2.906,35,2.906,36,2.132,37,4.106,38,2.906,39,0.499,40,3.136,41,3.011,42,0.897,43,2.439,44,2.874,45,0.055,46,1.218,47,2.874,48,1.044,49,0.214,50,0.018,51,0.018]],["title/controllers/AppController.html",[52,1.167,53,2.126]],["body/controllers/AppController.html",[3,0.274,4,0.274,5,0.274,7,0.371,22,0.03,23,0.71,39,0.519,45,0.059,49,0.322,50,0.024,51,0.024,52,1.932,53,3.521,54,1.571,55,3.671,56,4.517,57,1.791,58,0.844,59,3.14,60,3.671,61,2.356,62,1.696,63,3.671,64,1.35,65,4.374]],["title/modules/AppModule.html",[66,1.26,67,2.126]],["body/modules/AppModule.html",[3,0.189,4,0.189,5,0.189,21,0.458,22,0.03,26,0.491,39,0.596,45,0.04,49,0.222,50,0.019,51,0.019,53,3.183,54,1.516,58,0.583,59,3.09,60,2.538,66,1.637,67,4.183,68,1.374,69,1.918,70,2.538,71,2.538,72,2.538,73,3.392,74,3.392,75,3.392,76,3.392,77,2.274,78,1.629,79,1.629,80,3.024,81,2.496,82,2.496,83,0.933,84,2.538,85,4.222,86,5.265,87,3.024,88,0.865,89,0.802,90,0.865,91,3.024,92,0.865,93,2.218,94,4.222,95,1.788,96,1.172,97,3.024,98,2.218,99,3.024,100,3.024,101,3.024,102,3.024,103,1.979,104,3.024,105,3.024,106,3.024,107,3.024,108,1.979,109,3.024,110,2.218,111,3.024,112,2.218,113,3.024,114,1.629,115,3.024,116,2.218,117,3.024,118,3.024,119,1.918,120,3.024,121,1.979,122,3.024]],["title/injectables/AppService.html",[59,1.75,123,0.862]],["body/injectables/AppService.html",[3,0.285,4,0.285,5,0.285,7,0.385,22,0.03,23,0.736,39,0.438,45,0.061,49,0.334,50,0.024,51,0.024,56,4.621,57,1.833,58,0.876,59,2.965,63,3.811,64,1.401,123,1.46,124,2.062,125,3.811,126,4.541,127,4.541]],["title/entities/Cart.html",[0,0.93,128,1.167]],["body/entities/Cart.html",[0,1.437,2,1.466,3,0.171,4,0.171,5,0.171,7,0.231,8,1.837,12,0.33,13,1.519,17,2.472,21,0.656,22,0.03,23,0.899,24,2.17,26,0.98,30,2.885,31,2.714,36,2.873,39,0.513,40,3.255,41,3.367,42,0.84,43,2.284,44,1.343,45,0.052,46,1.141,47,2.479,48,0.977,49,0.2,50,0.017,51,0.017,119,1.779,128,1.803,129,2.284,130,3.367,131,3.853,132,3.367,133,2.308,134,4.59,135,4.59,136,2.714,137,3.853,138,4.59,139,2.721,140,2.721,141,2.721,142,2.873,143,3.288,144,2.721,145,3.918,146,2.721,147,1.996,148,2.721,149,2.721,150,2.721,151,2.721,152,3.918,153,2.721,154,1.996,155,2.284,156,2.563,157,0.906,158,2.284]],["title/controllers/CartController.html",[52,1.167,159,2.126]],["body/controllers/CartController.html",[3,0.263,4,0.188,5,0.188,7,0.254,11,1.202,12,0.363,21,0.456,22,0.03,23,0.928,24,1.508,26,0.681,39,0.506,45,0.04,48,1.078,49,0.221,50,0.018,51,0.018,52,1.74,54,1.078,57,1.747,58,0.579,61,1.617,62,1.164,64,1.296,83,1.296,88,1.202,89,1.114,90,1.202,92,1.502,128,2.187,159,2.748,160,2.519,161,1.964,162,4.2,163,1.908,164,1.905,165,3.525,166,4.404,167,2.519,168,2.803,169,4.2,170,3.001,171,1.884,172,3.525,173,3.08,174,2.031,175,1.628,176,2.519,177,4.2,178,3.001,179,3.08,180,2.201,181,2.383,182,1.964,183,2.609,184,2.519,185,1.617,186,2.201,187,3.001,188,3.001,189,3.001,190,2.519,191,1.508,192,3.001,193,3.001,194,3.001]],["title/modules/CartModule.html",[66,1.26,73,1.921]],["body/modules/CartModule.html",[1,1.869,3,0.205,4,0.205,5,0.205,7,0.277,8,1.376,11,1.276,22,0.03,39,0.616,45,0.044,49,0.241,50,0.02,51,0.02,54,1.601,58,0.631,66,2.111,68,1.486,69,2.025,73,3.711,77,2.401,78,1.763,79,1.763,81,2.636,82,1.935,95,1.935,96,1.269,128,2.046,133,1.729,159,3.318,163,2.025,183,3.166,184,2.747,185,1.763,195,2.747,196,2.747,197,2.67,198,2.279,199,3.273,200,1.729,201,3.27,202,3.273,203,2.747,204,2.141,205,2.025,206,2.4,207,1.935,208,1.615,209,2.201,210,2.141,211,1.935,212,2.747]],["title/injectables/CartService.html",[123,0.862,183,1.75]],["body/injectables/CartService.html",[3,0.131,4,0.131,5,0.131,7,0.177,8,1.552,12,0.253,21,0.426,22,0.03,23,0.816,26,0.637,39,0.521,42,0.646,45,0.028,49,0.154,50,0.014,51,0.014,57,1.674,58,0.404,62,1.522,64,0.994,83,0.994,88,1.124,89,1.041,90,1.124,92,1.262,96,0.811,119,0.95,123,0.854,124,0.95,128,2.172,132,1.535,133,1.846,137,1.756,157,1.744,164,1.674,165,2.703,166,2.703,167,2.703,168,2.284,171,1.584,172,2.703,173,3.234,174,1.849,175,0.811,176,2.703,179,2.362,181,1.784,183,1.735,185,1.127,191,1.881,197,2.38,198,2.031,203,1.756,204,1.369,207,1.237,208,1.033,213,1.756,214,2.362,215,1.904,216,1.756,217,2.607,218,2.092,219,2.703,220,2.092,221,2.703,222,2.703,223,2.092,224,3.221,225,1.756,226,1.756,227,1.369,228,1.756,229,1.756,230,2.115,231,2.326,232,2.703,233,2.092,234,2.703,235,3.296,236,2.092,237,2.092,238,3.688,239,2.703,240,2.375,241,2.092,242,3.221,243,2.362,244,2.092,245,1.369,246,2.092,247,1.756,248,3.221,249,2.092,250,2.092,251,2.092,252,1.756,253,1.756,254,2.092,255,2.703,256,1.756,257,2.092,258,1.756,259,2.092,260,2.092,261,2.092,262,2.092,263,1.756,264,2.092,265,2.092,266,1.756,267,1.535,268,2.092,269,3.221,270,2.092,271,2.092,272,2.092]],["title/classes/HttpExceptionFilter.html",[45,0.044,273,2.383]],["body/classes/HttpExceptionFilter.html",[3,0.227,4,0.227,5,0.227,7,0.307,12,0.438,21,0.393,22,0.029,26,0.587,39,0.46,45,0.071,49,0.266,50,0.021,51,0.021,58,0.698,83,1.472,88,1.036,89,0.96,90,1.036,92,1.036,93,2.654,108,3.491,121,3.121,157,1.205,171,1.713,231,2.377,273,3.498,274,1.949,275,3.038,276,4.77,277,4.77,278,4.77,279,4.003,280,5.335,281,4.477,282,4.77,283,5.671,284,5.671,285,3.619,286,3.619,287,4.003,288,2.82,289,1.949,290,3.619,291,3.619,292,3.619,293,3.619,294,3.619,295,4.77,296,3.619,297,3.619,298,3.038,299,3.619,300,3.619,301,3.619,302,3.619,303,3.038,304,3.619]],["title/classes/JwtServiceClass.html",[45,0.044,209,1.604]],["body/classes/JwtServiceClass.html",[3,0.143,4,0.143,5,0.143,7,0.391,8,1.818,12,0.277,17,1.233,21,0.501,22,0.03,23,0.673,26,0.749,39,0.478,45,0.031,49,0.168,50,0.015,51,0.015,57,1.93,61,1.233,62,0.887,64,1.281,83,1.064,88,1.322,89,1.225,90,1.322,92,1.49,164,1.895,174,1.446,175,1.337,181,2.098,191,0.822,208,2.048,209,1.702,214,2.529,215,1.353,222,2.894,231,1.446,240,1.233,274,1.233,281,1.921,288,3.195,289,2.488,303,1.921,305,1.921,306,4.378,307,3.449,308,2.894,309,3.449,310,3.449,311,3.449,312,3.449,313,2.289,314,5.692,315,2.289,316,3.449,317,2.289,318,2.894,319,5.01,320,2.529,321,3.449,322,2.289,323,3.449,324,4.149,325,4.149,326,4.149,327,4.149,328,4.149,329,4.149,330,3.387,331,3.483,332,3.483,333,2.894,334,3.449,335,2.289,336,5.208,337,3.449,338,2.289,339,2.289,340,2.289,341,2.289,342,3.449,343,2.289,344,2.289,345,2.289]],["title/injectables/LoggerMiddleware.html",[103,2.126,123,0.862]],["body/injectables/LoggerMiddleware.html",[3,0.337,4,0.199,5,0.199,7,0.269,12,0.384,13,1.691,21,0.344,22,0.03,26,0.707,39,0.42,45,0.042,49,0.233,50,0.019,51,0.019,57,1.875,58,0.611,64,1.346,83,1.346,88,0.907,89,0.84,90,0.907,92,0.907,93,3.198,103,2.853,121,2.073,123,1.156,124,1.439,156,2.073,157,1.451,171,1.566,179,3.198,200,1.691,230,2.686,231,2.252,245,2.073,287,4.885,288,3.592,289,1.707,298,4.185,346,2.659,347,5.821,348,4.361,349,4.361,350,4.361,351,3.939,352,5.371,353,3.168,354,4.361,355,3.168,356,4.361,357,3.168,358,4.986,359,3.168,360,3.168,361,3.168,362,3.168,363,4.986,364,3.168,365,3.168,366,4.361,367,4.361]],["title/classes/LoginDto.html",[45,0.044,368,1.921]],["body/classes/LoginDto.html",[3,0.238,4,0.238,5,0.238,7,0.322,11,1.41,12,0.461,13,1.91,21,0.535,22,0.03,23,0.938,24,1.769,26,0.799,39,0.475,44,2.432,45,0.066,46,1.594,47,2.697,48,1.366,49,0.28,50,0.022,51,0.022,114,3.225,168,2.72,174,2.065,274,2.049,368,2.913,369,3.192,370,4.927,371,4.135,372,4.927,373,6.135,374,3.613,375,3.804,376,3.804,377,3.804,378,3.804,379,3.613]],["title/classes/Maintenance.html",[45,0.044,380,1.921]],["body/classes/Maintenance.html",[0,1.189,3,0.185,4,0.185,5,0.185,7,0.251,11,1.189,12,0.358,13,1.611,21,0.596,22,0.03,23,0.969,24,1.972,26,0.891,39,0.463,40,3.486,42,0.913,44,1.459,45,0.056,46,1.239,47,1.459,48,1.062,49,0.217,50,0.018,51,0.018,119,1.888,132,4.028,142,3.048,143,4.375,147,2.168,156,3.411,157,0.984,158,2.482,163,1.888,200,1.611,274,1.593,380,3.082,381,2.482,382,4.156,383,3.488,384,5.493,385,4.806,386,5.493,387,4.806,388,2.957,389,6.152,390,2.957,391,4.156,392,2.957,393,2.957,394,2.957,395,4.156]],["title/entities/Menu.html",[0,0.93,133,1.26]],["body/entities/Menu.html",[0,1.503,2,1.621,3,0.189,4,0.189,5,0.189,7,0.255,12,0.364,13,1.631,17,2.613,21,0.638,22,0.03,23,0.929,24,2.111,25,3.558,26,0.954,30,2.593,31,2.868,36,2.207,39,0.533,40,2.978,41,3.086,42,0.929,44,2.593,45,0.056,46,1.261,47,2.729,48,1.08,49,0.221,50,0.019,51,0.019,128,2.189,130,3.558,131,4.071,133,2.037,136,2.868,154,3.086,205,2.768,252,3.531,396,2.525,397,4.851,398,2.207,399,3.009,400,3.009,401,3.009,402,3.009,403,3.009,404,3.009,405,4.207,406,3.009,407,3.009,408,3.086,409,3.009,410,2.525]],["title/controllers/PaymentController.html",[52,1.167,411,2.126]],["body/controllers/PaymentController.html",[3,0.235,4,0.235,5,0.235,7,0.317,12,0.453,21,0.406,22,0.03,23,0.88,24,1.344,26,0.607,39,0.523,45,0.05,48,1.344,49,0.275,50,0.021,51,0.021,52,1.947,54,1.344,57,1.623,58,0.722,61,2.017,62,1.452,64,1.156,83,1.505,88,1.071,89,0.993,90,1.071,92,1.395,161,2.45,164,1.805,168,2.463,175,1.452,181,2.215,182,2.45,186,2.746,191,1.344,411,3.191,412,3.142,413,3.978,414,5.746,415,3.744,416,4.877,417,3.744,418,2.921,419,3.142,420,3.744,421,3.744,422,3.744,423,3.744]],["title/modules/PaymentModule.html",[66,1.26,74,1.921]],["body/modules/PaymentModule.html",[1,1.976,3,0.223,4,0.223,5,0.223,7,0.301,8,1.455,11,1.349,22,0.03,39,0.609,45,0.048,49,0.261,50,0.021,51,0.021,54,1.692,58,0.686,66,1.827,68,1.615,69,2.141,74,3.688,77,2.539,78,1.915,79,1.915,81,2.786,82,2.101,95,2.101,96,1.378,128,1.276,163,2.141,185,1.915,198,2.335,200,1.827,201,3.457,204,2.326,208,1.755,209,2.326,210,2.326,211,2.101,212,2.983,411,3.46,413,3.457,418,3.243,419,2.983,424,2.983,425,2.983,426,3.555,427,3.555]],["title/injectables/PaymentService.html",[123,0.862,418,1.75]],["body/injectables/PaymentService.html",[3,0.19,4,0.19,5,0.19,7,0.257,8,0.936,12,0.367,21,0.459,22,0.03,23,0.79,26,0.686,39,0.534,42,0.936,45,0.041,49,0.223,50,0.019,51,0.019,57,1.408,58,0.585,62,1.64,64,0.936,83,1.305,88,1.21,89,1.121,90,1.21,92,1.21,96,1.175,123,1.121,124,1.377,128,1.519,157,1.009,163,1.921,164,1.621,168,1.921,171,1.519,175,1.175,181,1.377,185,1.633,191,1.749,198,2.284,200,1.64,204,1.984,214,3.102,215,2.5,216,2.544,217,3.116,219,3.55,227,1.984,228,2.544,229,2.544,230,2.278,231,2.042,238,3.572,239,2.544,240,1.633,255,3.55,256,2.544,258,2.544,263,2.544,266,2.544,267,3.102,413,4.211,418,2.278,428,2.544,429,3.55,430,4.23,431,3.032,432,4.23,433,3.032,434,4.23,435,2.544,436,3.032,437,3.032,438,3.032,439,3.032,440,3.032,441,3.032,442,3.032,443,3.032,444,3.032]],["title/entities/Restaurent.html",[0,0.93,205,1.476]],["body/entities/Restaurent.html",[0,1.438,2,1.469,3,0.288,4,0.171,5,0.171,7,0.426,10,3.293,11,1.123,12,0.33,13,1.521,17,2.476,21,0.635,22,0.03,23,1.003,24,2.1,25,3.687,26,0.949,30,1.937,31,2.717,39,0.513,40,3.078,42,0.842,44,2.738,45,0.053,46,1.143,47,2.821,48,0.979,49,0.2,50,0.017,51,0.017,119,1.782,133,2.344,136,2.717,155,2.289,157,0.908,164,0.908,200,1.521,205,2.283,379,2.878,380,2.32,398,2,408,2.878,445,2.289,446,4.596,447,3.857,448,4.596,449,4.596,450,2.727,451,2.727,452,2.727,453,3.293,454,2.727,455,3.293,456,2.727,457,2.727,458,2.727,459,2.727,460,2.727,461,2.727,462,2.289,463,2.289,464,3.293,465,2.727,466,3.924,467,2.289,468,2,469,2.727]],["title/controllers/RestaurentController.html",[52,1.167,470,2.126]],["body/controllers/RestaurentController.html",[3,0.265,4,0.19,5,0.19,12,0.368,21,0.529,22,0.03,23,0.791,24,1.895,26,0.856,39,0.535,45,0.041,48,1.091,49,0.223,50,0.019,51,0.019,52,1.091,54,1.091,58,0.586,61,1.637,62,1.178,64,1.628,83,1.308,88,1.396,89,1.293,90,1.396,92,1.51,133,2.046,136,2.505,161,1.989,164,2.1,174,2.212,175,2.046,180,2.229,181,1.381,182,1.989,186,2.229,191,1.751,197,2.215,205,2.52,207,1.797,470,2.772,471,2.551,472,4.237,473,3.556,474,3.556,475,4.428,476,3.04,477,4.237,478,3.04,479,2.551,480,4.237,481,3.04,482,2.551,483,4.237,484,3.04,485,4.237,486,3.04,487,3.04,488,2.551,489,3.04,490,3.04,491,3.04,492,3.04,493,3.04,494,3.04,495,3.04,496,3.04,497,3.04]],["title/modules/RestaurentModule.html",[66,1.26,75,1.921]],["body/modules/RestaurentModule.html",[3,0.252,4,0.252,5,0.252,22,0.029,39,0.6,45,0.054,49,0.296,50,0.022,51,0.022,54,1.833,58,0.776,66,1.98,68,1.826,69,2.319,75,3.68,77,2.75,78,2.166,79,2.166,81,3.018,82,2.377,95,2.377,96,1.559,133,1.98,197,2.827,205,1.826,206,2.949,207,2.377,470,3.671,488,3.375,498,4.021,499,4.021,500,4.021,501,4.021,502,4.021]],["title/injectables/RestaurentService.html",[123,0.862,197,1.476]],["body/injectables/RestaurentService.html",[3,0.137,4,0.137,5,0.137,7,0.185,11,0.952,12,0.264,21,0.555,22,0.03,23,0.958,26,0.863,39,0.468,42,0.674,45,0.029,49,0.161,50,0.015,51,0.015,58,0.421,62,1.29,64,1.579,83,1.027,88,1.464,89,1.356,90,1.464,92,1.464,96,0.847,123,0.883,124,0.992,130,1.602,133,2.062,136,3.493,157,1.616,163,1.512,164,2.074,174,1.891,175,1.983,191,1.969,197,1.512,200,1.29,205,2.683,206,1.602,207,1.291,215,1.968,217,3.145,226,1.833,227,1.429,230,1.793,231,2.144,232,4.464,234,1.833,235,2.793,240,1.793,429,2.793,453,1.833,473,2.793,474,2.793,475,3.785,479,2.793,482,2.793,503,1.833,504,3.329,505,3.329,506,3.329,507,3.329,508,2.184,509,4.033,510,2.184,511,3.329,512,3.329,513,2.184,514,2.184,515,3.329,516,2.184,517,3.329,518,3.329,519,2.184,520,2.184,521,2.184,522,2.184,523,2.184,524,2.184,525,2.184,526,2.184,527,2.184,528,2.184,529,3.329,530,2.441,531,2.184,532,2.184,533,2.184,534,2.184,535,3.329,536,2.184,537,2.184,538,2.184]],["title/interfaces/SwaggerConfig.html",[539,2.126,540,2.126]],["body/interfaces/SwaggerConfig.html",[3,0.263,4,0.263,5,0.263,7,0.523,11,1.203,12,0.509,13,2.036,21,0.651,22,0.028,23,1.075,49,0.309,50,0.023,51,0.023,200,1.63,539,2.751,540,3.436,541,4.205,542,3.529,543,2.751,544,3.084,545,3.529,546,5.034,547,5.034,548,5.034]],["title/classes/TypeOrmInterface.html",[45,0.044,549,2.126]],["body/classes/TypeOrmInterface.html",[3,0.255,4,0.255,5,0.255,7,0.345,11,1.166,12,0.494,13,1.997,21,0.664,22,0.029,23,1.041,26,0.992,30,2.542,42,1.258,45,0.055,49,0.3,50,0.023,51,0.023,108,3.694,110,4.14,112,4.14,114,3.041,116,4.14,174,1.709,274,2.195,544,2.989,545,3.421,549,3.37,550,3.421,551,4.076,552,4.076,553,4.076,554,4.076,555,4.076]],["title/entities/User.html",[0,0.93,8,1.003]],["body/entities/User.html",[0,1.356,1,2.462,2,1.297,3,0.151,4,0.151,5,0.151,7,0.204,8,1.638,11,1.025,12,0.292,13,1.389,17,2.304,21,0.613,22,0.03,23,0.916,24,2.028,26,0.916,30,2.339,31,2.529,39,0.512,40,2.859,42,0.743,44,2.339,45,0.048,46,1.01,47,2.62,48,0.865,49,0.177,50,0.016,51,0.016,89,1.134,114,2.552,119,1.627,128,2.109,154,2.628,157,1.193,163,1.627,164,1.424,168,1.943,171,0.865,191,0.865,200,1.389,231,1.01,253,3.007,351,1.766,374,1.766,379,2.628,380,2.118,383,3.007,398,2.628,408,3.138,410,2.021,447,3.591,455,3.007,462,2.021,463,2.021,464,3.007,467,3.007,468,2.628,556,1.766,557,4.278,558,3.007,559,2.409,560,2.409,561,2.409,562,2.409,563,2.409,564,2.409,565,2.409,566,3.583,567,2.409,568,2.409,569,2.409,570,2.409,571,3.583,572,2.409,573,2.021,574,2.021,575,2.021,576,2.021,577,1.766,578,2.021,579,2.021,580,2.021,581,1.576,582,1.766,583,2.409,584,2.409,585,2.409,586,2.409,587,2.409,588,3.583,589,2.409,590,2.409,591,3.583,592,2.409]],["title/controllers/UserController.html",[52,1.167,593,2.126]],["body/controllers/UserController.html",[0,1.143,1,2.132,3,0.175,4,0.175,5,0.175,7,0.237,8,1.85,12,0.339,21,0.506,22,0.03,23,0.756,24,1.674,26,0.756,39,0.539,45,0.037,49,0.206,50,0.018,51,0.018,52,1.005,54,1.005,57,1.33,58,0.54,61,1.507,62,1.085,64,1.439,83,1.233,88,1.334,89,1.236,90,1.334,92,1.455,119,1.271,161,1.831,164,1.995,168,2.31,171,1.435,174,2.512,175,1.807,180,2.931,181,1.815,182,1.831,190,2.348,191,1.674,198,1.807,208,1.381,211,1.654,288,3.481,289,1.507,320,2.931,368,3.006,530,3.73,593,2.615,594,2.348,595,3.354,596,3.996,597,3.913,598,2.348,599,3.996,600,2.798,601,2.798,602,3.996,603,2.798,604,3.354,605,2.348,606,3.996,607,2.798,608,3.996,609,2.348,610,2.348,611,2.798,612,2.798,613,2.798,614,2.798,615,2.798,616,2.798,617,2.798]],["title/modules/UserModule.html",[66,1.26,76,1.921]],["body/modules/UserModule.html",[1,2.02,3,0.23,4,0.23,5,0.23,8,1.134,22,0.03,39,0.613,45,0.049,49,0.27,50,0.021,51,0.021,54,1.73,58,0.709,66,1.868,68,1.669,69,2.188,76,3.593,77,2.595,78,1.979,79,1.979,81,2.848,82,2.173,95,2.173,96,1.425,128,1.73,185,1.979,198,2.356,208,1.814,209,2.378,210,2.405,211,2.173,330,2.695,593,3.517,609,3.084,618,3.675,619,3.675,620,3.675,621,3.675,622,3.675,623,3.675,624,3.675,625,3.675,626,3.675,627,3.675,628,3.675,629,3.675]],["title/injectables/UserService.html",[123,0.862,198,1.26]],["body/injectables/UserService.html",[0,0.878,1,2.147,3,0.123,4,0.123,5,0.123,7,0.26,8,1.924,12,0.238,21,0.502,22,0.03,23,0.795,26,0.75,39,0.511,42,0.606,45,0.026,49,0.144,50,0.014,51,0.014,57,1.419,58,0.379,62,1.463,64,1.316,83,0.947,88,1.324,89,1.226,90,1.324,92,1.403,96,0.762,114,2.297,119,0.893,123,0.813,124,0.893,157,1.54,164,1.918,168,2.226,171,1.661,174,2.282,175,1.653,181,1.393,191,1.76,198,1.189,208,0.97,209,2.527,210,1.286,211,1.162,215,1.814,217,3.027,227,1.286,230,2.033,231,2.282,238,3.885,240,1.652,267,2.25,288,3.027,289,1.058,306,3.128,308,2.575,319,2.575,320,2.25,351,1.441,368,2.521,435,1.649,530,3.392,558,1.649,574,1.649,575,1.649,576,1.649,577,1.441,578,1.649,579,1.649,580,1.649,581,2.007,582,1.441,595,2.575,597,2.575,598,2.575,604,2.575,605,2.575,610,1.649,630,1.441,631,3.068,632,3.068,633,1.965,634,3.774,635,1.965,636,3.068,637,1.965,638,3.068,639,1.965,640,1.965,641,3.068,642,3.068,643,3.068,644,3.068,645,1.965,646,1.649,647,1.965,648,1.965,649,1.965,650,1.965,651,1.965,652,1.965,653,1.965,654,1.965,655,3.068,656,1.965,657,1.965,658,1.965,659,1.965,660,1.965,661,1.965,662,1.965,663,1.965,664,1.965,665,1.965,666,1.965,667,1.965,668,1.965]],["title/injectables/ValidationPipe.html",[123,0.862,669,2.383]],["body/injectables/ValidationPipe.html",[3,0.206,4,0.206,5,0.206,7,0.279,12,0.398,21,0.486,22,0.03,23,0.534,26,0.726,30,1.624,39,0.49,45,0.068,46,1.379,49,0.242,50,0.02,51,0.02,57,1.489,58,0.635,64,1.569,83,1.381,88,1.28,89,1.187,90,1.28,92,1.28,121,2.153,123,1.187,124,1.495,142,3.729,147,2.413,157,1.095,164,1.693,171,1.607,175,1.276,191,1.182,225,2.762,230,2.739,231,2.132,240,1.772,243,2.413,245,3.571,371,3.756,468,2.413,544,2.413,669,3.282,670,2.762,671,5.085,672,4.475,673,4.475,674,4.475,675,4.475,676,3.291,677,5.085,678,4.475,679,5.457,680,3.291,681,4.475,682,3.291,683,2.762,684,3.291,685,3.291,686,3.291,687,3.291,688,3.291,689,3.291,690,3.291,691,3.291]],["title/coverage.html",[692,3.254]],["body/coverage.html",[0,1.562,1,1.218,5,0.182,6,2.439,8,0.897,21,0.315,22,0.029,45,0.073,50,0.018,51,0.018,52,1.96,53,1.902,55,2.439,59,1.565,98,2.132,103,1.902,123,1.544,125,2.439,128,1.044,129,2.439,133,1.127,157,0.967,159,1.902,160,2.439,183,1.565,197,1.32,198,1.127,205,1.32,209,1.435,213,2.439,243,2.132,273,2.132,275,2.439,305,2.439,346,2.439,368,1.718,369,2.439,380,1.718,381,2.439,396,2.439,411,1.902,412,2.439,418,1.565,428,2.439,445,2.439,470,1.902,471,2.439,503,2.439,539,1.902,540,1.902,542,2.439,549,1.902,550,2.439,556,3.011,581,2.687,593,1.902,594,2.439,630,3.011,669,2.132,670,2.439,692,2.132,693,2.906,694,2.906,695,2.906,696,2.906,697,2.906,698,4.761,699,4.106,700,2.906,701,2.906,702,2.439,703,4.342,704,6.458,705,6.31,706,2.906,707,2.906,708,2.439,709,2.439,710,2.906,711,2.906,712,2.439,713,3.446,714,2.439,715,2.906,716,4.106,717,2.906,718,2.906,719,2.906,720,2.906,721,2.906,722,2.906,723,2.906,724,2.906,725,2.906,726,2.906,727,2.906,728,2.439,729,2.439,730,2.906,731,2.906]],["title/dependencies.html",[69,1.776,732,2.713]],["body/dependencies.html",[22,0.03,42,1.28,45,0.07,46,1.738,48,1.489,50,0.023,51,0.023,58,0.8,69,1.883,96,1.608,289,2.804,306,3.041,330,3.041,333,3.48,543,2.713,683,3.48,733,5.968,734,4.147,735,4.147,736,4.147,737,4.147,738,4.147,739,4.147,740,4.147,741,4.147,742,4.147,743,4.147,744,4.147,745,4.147,746,4.147,747,4.147,748,4.147,749,4.147,750,4.147,751,4.147,752,4.147,753,4.147,754,4.147,755,4.147,756,4.147,757,4.147]],["title/miscellaneous/functions.html",[758,1.775,759,3.281]],["body/miscellaneous/functions.html",[7,0.375,11,1.266,12,0.536,21,0.48,22,0.027,50,0.024,51,0.024,57,1.472,88,1.266,89,1.173,90,1.266,92,1.266,171,1.588,318,4.547,331,3.712,332,3.712,543,3.545,712,3.712,713,3.712,714,4.547,728,3.712,729,4.916,758,2.894,759,3.712,760,4.423,761,4.423,762,4.423,763,4.423,764,4.423,765,3.712,766,4.423,767,5.418,768,3.244,769,4.423,770,4.423,771,4.423,772,4.423]],["title/index.html",[12,0.329,765,2.277,773,2.713]],["body/index.html",[4,0.234,7,0.316,11,1.068,22,0.029,50,0.021,51,0.021,217,2.206,279,3.132,577,2.737,692,2.737,768,2.737,774,3.732,775,3.732,776,4.867,777,3.732,778,3.732,779,3.732,780,3.732,781,3.732,782,3.732,783,5.415,784,3.732,785,3.732,786,6.216,787,3.732,788,3.732,789,6.103,790,3.732,791,3.732,792,4.867,793,3.732,794,3.732,795,3.732,796,3.732,797,4.867,798,4.867,799,3.732,800,3.732,801,3.732,802,4.867,803,4.867,804,3.732,805,3.732,806,3.732,807,3.732,808,3.132,809,3.732,810,3.732,811,3.732,812,3.732,813,3.732,814,3.732,815,3.732,816,3.732,817,3.732,818,3.732,819,3.732,820,3.732,821,3.732,822,3.732,823,3.732,824,3.732,825,3.732]],["title/modules.html",[68,2.015]],["body/modules.html",[22,0.025,50,0.025,51,0.025,67,3.076,68,2.135,73,2.779,74,2.779,75,2.779,76,2.779,808,5.347,826,6.371,827,6.371,828,6.371]],["title/overview.html",[829,3.724]],["body/overview.html",[2,1.998,22,0.029,50,0.021,51,0.021,54,1.332,59,2.908,67,4.261,68,1.685,69,2.201,70,3.113,71,3.113,72,3.113,73,3.763,74,3.669,75,3.512,76,3.512,77,2.611,78,1.998,79,1.998,124,1.685,183,2.908,195,3.113,196,3.113,197,2.6,198,2.303,247,3.113,274,1.998,418,2.908,424,3.113,425,3.113,539,2.427,829,3.113,830,5.725,831,3.709]],["title/miscellaneous/variables.html",[758,1.775,832,3.281]],["body/miscellaneous/variables.html",[3,0.241,7,0.325,11,1.419,12,0.465,21,0.538,22,0.029,42,1.185,50,0.022,51,0.022,84,3.223,98,3.636,108,2.513,110,2.816,112,2.816,114,2.957,116,2.816,156,3.796,163,2.252,171,1.971,173,2.816,200,1.489,201,2.816,221,4.161,245,3.796,374,2.816,540,2.513,543,2.513,546,3.223,547,3.223,548,3.223,549,2.513,556,2.816,573,3.223,581,3.93,582,3.636,630,2.816,646,3.223,702,3.223,703,3.223,708,3.223,709,4.161,758,2.513,768,2.816,832,3.223,833,3.84,834,3.84,835,3.84,836,3.84,837,3.84,838,3.84,839,3.84,840,3.84,841,4.958,842,3.84]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Cart.html":{},"controllers/CartController.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Menu.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Restaurent.html":{},"controllers/RestaurentController.html":{},"modules/RestaurentModule.html":{},"injectables/RestaurentService.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":243,"title":{},"body":{"injectables/CartService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["0.1.13",{"_index":750,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":741,"title":{},"body":{"dependencies.html":{}}}],["0.2.41",{"_index":757,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":740,"title":{},"body":{"dependencies.html":{}}}],["0/5",{"_index":722,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":247,"title":{},"body":{"injectables/CartService.html":{},"overview.html":{}}}],["1.0",{"_index":837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.4.6",{"_index":743,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":705,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":697,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":699,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":726,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":711,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":707,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":724,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":586,"title":{},"body":{"entities/User.html":{}}}],["100",{"_index":704,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":723,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":706,"title":{},"body":{"coverage.html":{}}}],["2.3.3",{"_index":745,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":739,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":719,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":721,"title":{},"body":{"coverage.html":{}}}],["2/6",{"_index":727,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":710,"title":{},"body":{"coverage.html":{}}}],["25",{"_index":725,"title":{},"body":{"coverage.html":{}}}],["3.0.2",{"_index":752,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":716,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":718,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":698,"title":{},"body":{"coverage.html":{}}}],["3306",{"_index":840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3h",{"_index":629,"title":{},"body":{"modules/UserModule.html":{}}}],["4.0.0",{"_index":747,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":756,"title":{},"body":{"dependencies.html":{}}}],["4/5",{"_index":701,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":830,"title":{},"body":{"overview.html":{}}}],["5.2.0",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":696,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":715,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":720,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":831,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":754,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":717,"title":{},"body":{"coverage.html":{}}}],["8.0.0",{"_index":733,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":700,"title":{},"body":{"coverage.html":{}}}],["add",{"_index":172,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{}}}],["addaddress",{"_index":595,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["addaddress(@body",{"_index":616,"title":{},"body":{"controllers/UserController.html":{}}}],["addaddress(data",{"_index":598,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["addaddressdata(address",{"_index":587,"title":{},"body":{"entities/User.html":{}}}],["addcartdata(cart",{"_index":590,"title":{},"body":{"entities/User.html":{}}}],["addfood",{"_index":472,"title":{},"body":{"controllers/RestaurentController.html":{}}}],["addfood(@body",{"_index":493,"title":{},"body":{"controllers/RestaurentController.html":{}}}],["addfood(data",{"_index":476,"title":{},"body":{"controllers/RestaurentController.html":{}}}],["additemsintocart",{"_index":165,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{}}}],["additemsintocart(@body",{"_index":189,"title":{},"body":{"controllers/CartController.html":{}}}],["additemsintocart(data",{"_index":167,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{}}}],["addmenu",{"_index":505,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["addmenu(data",{"_index":512,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["addmenudata(menu",{"_index":465,"title":{},"body":{"entities/Restaurent.html":{}}}],["addpayment",{"_index":414,"title":{},"body":{"controllers/PaymentController.html":{}}}],["addpayment(@param('email",{"_index":422,"title":{},"body":{"controllers/PaymentController.html":{}}}],["addpayment(email",{"_index":415,"title":{},"body":{"controllers/PaymentController.html":{}}}],["address",{"_index":1,"title":{"entities/Address.html":{}},"body":{"entities/Address.html":{},"modules/CartModule.html":{},"modules/PaymentModule.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["address.entity",{"_index":572,"title":{},"body":{"entities/User.html":{}}}],["address.user",{"_index":558,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["addressrepository",{"_index":634,"title":{},"body":{"injectables/UserService.html":{}}}],["addrestaurest",{"_index":473,"title":{},"body":{"controllers/RestaurentController.html":{},"injectables/RestaurentService.html":{}}}],["addrestaurest(@body",{"_index":491,"title":{},"body":{"controllers/RestaurentController.html":{}}}],["addrestaurest(data",{"_index":479,"title":{},"body":{"controllers/RestaurentController.html":{},"injectables/RestaurentService.html":{}}}],["age",{"_index":557,"title":{},"body":{"entities/User.html":{}}}],["agent",{"_index":361,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["all_items_in_your_cart",{"_index":270,"title":{},"body":{"injectables/CartService.html":{}}}],["amazing",{"_index":809,"title":{},"body":{"index.html":{}}}],["amount",{"_index":442,"title":{},"body":{"injectables/PaymentService.html":{}}}],["apiproperty",{"_index":47,"title":{},"body":{"entities/Address.html":{},"entities/Cart.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Menu.html":{},"entities/Restaurent.html":{},"entities/User.html":{}}}],["apis",{"_index":162,"title":{},"body":{"controllers/CartController.html":{}}}],["apitags",{"_index":186,"title":{},"body":{"controllers/CartController.html":{},"controllers/PaymentController.html":{},"controllers/RestaurentController.html":{}}}],["apitags('cart",{"_index":187,"title":{},"body":{"controllers/CartController.html":{}}}],["apitags('payment",{"_index":420,"title":{},"body":{"controllers/PaymentController.html":{}}}],["apitags('restaurent",{"_index":489,"title":{},"body":{"controllers/RestaurentController.html":{}}}],["app",{"_index":768,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["app.controller",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":60,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":53,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":782,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":67,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":59,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentmetadata",{"_index":679,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["argumentshost",{"_index":284,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["array",{"_index":468,"title":{},"body":{"entities/Restaurent.html":{},"entities/User.html":{},"injectables/ValidationPipe.html":{}}}],["async",{"_index":164,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"classes/JwtServiceClass.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/Restaurent.html":{},"controllers/RestaurentController.html":{},"injectables/RestaurentService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["author",{"_index":818,"title":{},"body":{"index.html":{}}}],["autoloadentities",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["avaliable",{"_index":163,"title":{},"body":{"controllers/CartController.html":{},"modules/CartModule.html":{},"classes/Maintenance.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"injectables/RestaurentService.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["avalibale",{"_index":10,"title":{},"body":{"entities/Address.html":{},"entities/Restaurent.html":{}}}],["await",{"_index":191,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"classes/JwtServiceClass.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/RestaurentController.html":{},"injectables/RestaurentService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["backers",{"_index":810,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":225,"title":{},"body":{"injectables/CartService.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('min",{"_index":244,"title":{},"body":{"injectables/CartService.html":{}}}],["badrequestexception('validation",{"_index":689,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["based",{"_index":179,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/LoggerMiddleware.html":{}}}],["bcrypt",{"_index":581,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bcrypt.compare(data.password",{"_index":656,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hash(this.password",{"_index":585,"title":{},"body":{"entities/User.html":{}}}],["bcryptjs",{"_index":738,"title":{},"body":{"dependencies.html":{}}}],["beforeinsert",{"_index":571,"title":{},"body":{"entities/User.html":{}}}],["body",{"_index":180,"title":{},"body":{"controllers/CartController.html":{},"controllers/RestaurentController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":142,"title":{},"body":{"entities/Cart.html":{},"classes/Maintenance.html":{},"injectables/ValidationPipe.html":{}}}],["bootstrap",{"_index":729,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":828,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":826,"title":{},"body":{"modules.html":{}}}],["building",{"_index":777,"title":{},"body":{"index.html":{}}}],["business",{"_index":504,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["cart",{"_index":128,"title":{"entities/Cart.html":{}},"body":{"entities/Cart.html":{},"controllers/CartController.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"entities/Menu.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["cart.controller",{"_index":202,"title":{},"body":{"modules/CartModule.html":{}}}],["cart.entity",{"_index":410,"title":{},"body":{"entities/Menu.html":{},"entities/User.html":{}}}],["cart.fooditemprice",{"_index":249,"title":{},"body":{"injectables/CartService.html":{}}}],["cart.menu",{"_index":252,"title":{},"body":{"injectables/CartService.html":{},"entities/Menu.html":{}}}],["cart.quantity",{"_index":242,"title":{},"body":{"injectables/CartService.html":{}}}],["cart.service",{"_index":184,"title":{},"body":{"controllers/CartController.html":{},"modules/CartModule.html":{}}}],["cart.totalprice",{"_index":251,"title":{},"body":{"injectables/CartService.html":{}}}],["cart.user",{"_index":253,"title":{},"body":{"injectables/CartService.html":{},"entities/User.html":{}}}],["cartcontroller",{"_index":159,"title":{"controllers/CartController.html":{}},"body":{"controllers/CartController.html":{},"modules/CartModule.html":{},"coverage.html":{}}}],["cartmodule",{"_index":73,"title":{"modules/CartModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CartModule.html":{},"modules.html":{},"overview.html":{}}}],["cartrepository",{"_index":219,"title":{},"body":{"injectables/CartService.html":{},"injectables/PaymentService.html":{}}}],["cartservice",{"_index":183,"title":{"injectables/CartService.html":{}},"body":{"controllers/CartController.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"coverage.html":{},"overview.html":{}}}],["catch",{"_index":281,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{}}}],["catch(exception",{"_index":282,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":290,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["category",{"_index":397,"title":{},"body":{"entities/Menu.html":{}}}],["city",{"_index":14,"title":{},"body":{"entities/Address.html":{}}}],["class",{"_index":45,"title":{"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"classes/TypeOrmInterface.html":{}},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Cart.html":{},"controllers/CartController.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Menu.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Restaurent.html":{},"controllers/RestaurentController.html":{},"modules/RestaurentModule.html":{},"injectables/RestaurentService.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":274,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"classes/TypeOrmInterface.html":{},"overview.html":{}}}],["clear",{"_index":324,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["cluster_appmodule",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_cartmodule",{"_index":195,"title":{},"body":{"modules/CartModule.html":{},"overview.html":{}}}],["cluster_cartmodule_providers",{"_index":196,"title":{},"body":{"modules/CartModule.html":{},"overview.html":{}}}],["cluster_paymentmodule",{"_index":424,"title":{},"body":{"modules/PaymentModule.html":{},"overview.html":{}}}],["cluster_paymentmodule_providers",{"_index":425,"title":{},"body":{"modules/PaymentModule.html":{},"overview.html":{}}}],["cluster_restaurentmodule",{"_index":498,"title":{},"body":{"modules/RestaurentModule.html":{}}}],["cluster_restaurentmodule_providers",{"_index":499,"title":{},"body":{"modules/RestaurentModule.html":{}}}],["cluster_usermodule",{"_index":618,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":619,"title":{},"body":{"modules/UserModule.html":{}}}],["column",{"_index":40,"title":{},"body":{"entities/Address.html":{},"entities/Cart.html":{},"classes/Maintenance.html":{},"entities/Menu.html":{},"entities/Restaurent.html":{},"entities/User.html":{}}}],["column()@apiproperty",{"_index":138,"title":{},"body":{"entities/Cart.html":{}}}],["column()@apiproperty()@isint",{"_index":560,"title":{},"body":{"entities/User.html":{}}}],["column()@apiproperty()@isstring",{"_index":566,"title":{},"body":{"entities/User.html":{}}}],["column()@isint()@apiproperty",{"_index":402,"title":{},"body":{"entities/Menu.html":{}}}],["column()@isstring()@apiproperty",{"_index":25,"title":{},"body":{"entities/Address.html":{},"entities/Menu.html":{},"entities/Restaurent.html":{}}}],["column({default",{"_index":143,"title":{},"body":{"entities/Cart.html":{},"classes/Maintenance.html":{}}}],["column({unique",{"_index":455,"title":{},"body":{"entities/Restaurent.html":{},"entities/User.html":{}}}],["columns",{"_index":383,"title":{},"body":{"classes/Maintenance.html":{},"entities/User.html":{}}}],["commom",{"_index":770,"title":{},"body":{"miscellaneous/functions.html":{}}}],["common/middleware/logger.middleware",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["common/providers/jwt.service",{"_index":210,"title":{},"body":{"modules/CartModule.html":{},"modules/PaymentModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["common/typeorm/typeorm.config",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["configurations",{"_index":201,"title":{},"body":{"modules/CartModule.html":{},"modules/PaymentModule.html":{},"miscellaneous/variables.html":{}}}],["configure",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["configure(consumer",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["const",{"_index":231,"title":{},"body":{"injectables/CartService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"injectables/PaymentService.html":{},"injectables/RestaurentService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["constructor",{"_index":215,"title":{},"body":{"injectables/CartService.html":{},"classes/JwtServiceClass.html":{},"injectables/PaymentService.html":{},"injectables/RestaurentService.html":{},"injectables/UserService.html":{}}}],["constructor(cartrepository",{"_index":216,"title":{},"body":{"injectables/CartService.html":{},"injectables/PaymentService.html":{}}}],["constructor(jwtservice",{"_index":313,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["constructor(private",{"_index":61,"title":{},"body":{"controllers/AppController.html":{},"controllers/CartController.html":{},"classes/JwtServiceClass.html":{},"controllers/PaymentController.html":{},"controllers/RestaurentController.html":{},"controllers/UserController.html":{}}}],["constructor(restaurentrepository",{"_index":508,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["constructor(userrepository",{"_index":633,"title":{},"body":{"injectables/UserService.html":{}}}],["consumer",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(loggermiddleware).forroutes",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["contentlength",{"_index":363,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["controller",{"_index":52,"title":{"controllers/AppController.html":{},"controllers/CartController.html":{},"controllers/PaymentController.html":{},"controllers/RestaurentController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/CartController.html":{},"controllers/PaymentController.html":{},"controllers/RestaurentController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('cart",{"_index":188,"title":{},"body":{"controllers/CartController.html":{}}}],["controller('payment",{"_index":421,"title":{},"body":{"controllers/PaymentController.html":{}}}],["controller('restaurent",{"_index":490,"title":{},"body":{"controllers/RestaurentController.html":{}}}],["controller('user",{"_index":611,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":54,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/CartController.html":{},"modules/CartModule.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"controllers/RestaurentController.html":{},"modules/RestaurentModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cookie",{"_index":333,"title":{},"body":{"classes/JwtServiceClass.html":{},"dependencies.html":{}}}],["coverage",{"_index":692,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":318,"title":{},"body":{"classes/JwtServiceClass.html":{},"miscellaneous/functions.html":{}}}],["createdat",{"_index":384,"title":{},"body":{"classes/Maintenance.html":{}}}],["createdate",{"_index":385,"title":{},"body":{"classes/Maintenance.html":{}}}],["createdocument",{"_index":714,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createdocument(app",{"_index":766,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createjwttoken",{"_index":310,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["createjwttoken(data",{"_index":316,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["createtime",{"_index":391,"title":{},"body":{"classes/Maintenance.html":{}}}],["createuser",{"_index":596,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(@body",{"_index":612,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(data",{"_index":601,"title":{},"body":{"controllers/UserController.html":{}}}],["credentials",{"_index":660,"title":{},"body":{"injectables/UserService.html":{}}}],["ctx",{"_index":291,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":294,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":293,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["cuntry",{"_index":15,"title":{},"body":{"entities/Address.html":{}}}],["data",{"_index":174,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"classes/JwtServiceClass.html":{},"classes/LoginDto.html":{},"controllers/RestaurentController.html":{},"injectables/RestaurentService.html":{},"classes/TypeOrmInterface.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["data.fooditemname",{"_index":237,"title":{},"body":{"injectables/CartService.html":{}}}],["data.id",{"_index":339,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["data.name",{"_index":650,"title":{},"body":{"injectables/UserService.html":{}}}],["data.restaurentname",{"_index":234,"title":{},"body":{"injectables/CartService.html":{},"injectables/RestaurentService.html":{}}}],["database",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"classes/TypeOrmInterface.html":{},"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":300,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["date().tolocalestring",{"_index":158,"title":{},"body":{"entities/Cart.html":{},"classes/Maintenance.html":{}}}],["declared",{"_index":545,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{}}}],["decorators",{"_index":24,"title":{},"body":{"entities/Address.html":{},"entities/Cart.html":{},"controllers/CartController.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Menu.html":{},"controllers/PaymentController.html":{},"entities/Restaurent.html":{},"controllers/RestaurentController.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":156,"title":{},"body":{"entities/Cart.html":{},"injectables/LoggerMiddleware.html":{},"classes/Maintenance.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":26,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"entities/Cart.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Menu.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/Restaurent.html":{},"controllers/RestaurentController.html":{},"injectables/RestaurentService.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["delete",{"_index":323,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["deletetoken",{"_index":311,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["deletetoken(response",{"_index":321,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["dependencies",{"_index":69,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/CartModule.html":{},"modules/PaymentModule.html":{},"modules/RestaurentModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/Cart.html":{},"controllers/CartController.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Menu.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Restaurent.html":{},"injectables/RestaurentService.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["development",{"_index":788,"title":{},"body":{"index.html":{}}}],["disable",{"_index":575,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["displsy",{"_index":269,"title":{},"body":{"injectables/CartService.html":{}}}],["document",{"_index":772,"title":{},"body":{"miscellaneous/functions.html":{}}}],["documentation",{"_index":693,"title":{},"body":{"coverage.html":{}}}],["doorno",{"_index":16,"title":{},"body":{"entities/Address.html":{}}}],["dto/login.dto",{"_index":610,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dummy",{"_index":56,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["e2e",{"_index":799,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":778,"title":{},"body":{"index.html":{}}}],["email",{"_index":168,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"classes/LoginDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["empty",{"_index":261,"title":{},"body":{"injectables/CartService.html":{}}}],["entire",{"_index":278,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["entities",{"_index":2,"title":{},"body":{"entities/Address.html":{},"entities/Cart.html":{},"entities/Menu.html":{},"entities/Restaurent.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/address.entity",{"_index":211,"title":{},"body":{"modules/CartModule.html":{},"modules/PaymentModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["entities/cart.entity",{"_index":185,"title":{},"body":{"controllers/CartController.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"modules/UserModule.html":{}}}],["entities/menu.entity",{"_index":207,"title":{},"body":{"modules/CartModule.html":{},"injectables/CartService.html":{},"controllers/RestaurentController.html":{},"modules/RestaurentModule.html":{},"injectables/RestaurentService.html":{}}}],["entities/restaurent.entity",{"_index":206,"title":{},"body":{"modules/CartModule.html":{},"modules/RestaurentModule.html":{},"injectables/RestaurentService.html":{}}}],["entities/user.entity",{"_index":208,"title":{},"body":{"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/JwtServiceClass.html":{},"modules/PaymentModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":0,"title":{"entities/Address.html":{},"entities/Cart.html":{},"entities/Menu.html":{},"entities/Restaurent.html":{},"entities/User.html":{}},"body":{"entities/Address.html":{},"entities/Cart.html":{},"classes/Maintenance.html":{},"entities/Menu.html":{},"entities/Restaurent.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["error",{"_index":342,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["errors",{"_index":686,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errors.length",{"_index":688,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["eslint",{"_index":574,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["eslint/no",{"_index":578,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["exception",{"_index":286,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":296,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":304,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":280,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptions",{"_index":277,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["execution",{"_index":764,"title":{},"body":{"miscellaneous/functions.html":{}}}],["expiresin",{"_index":628,"title":{},"body":{"modules/UserModule.html":{}}}],["export",{"_index":49,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Cart.html":{},"controllers/CartController.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Menu.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Restaurent.html":{},"controllers/RestaurentController.html":{},"modules/RestaurentModule.html":{},"injectables/RestaurentService.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["express",{"_index":289,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["extends",{"_index":463,"title":{},"body":{"entities/Restaurent.html":{},"entities/User.html":{}}}],["failed",{"_index":690,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["false",{"_index":658,"title":{},"body":{"injectables/UserService.html":{}}}],["file",{"_index":5,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Cart.html":{},"controllers/CartController.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Menu.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Restaurent.html":{},"controllers/RestaurentController.html":{},"modules/RestaurentModule.html":{},"injectables/RestaurentService.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["find",{"_index":276,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["finditem",{"_index":506,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["finditem(item",{"_index":515,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["findrestaurest",{"_index":507,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["findrestaurest(restaurentname",{"_index":518,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["finduser",{"_index":631,"title":{},"body":{"injectables/UserService.html":{}}}],["finduser(email",{"_index":638,"title":{},"body":{"injectables/UserService.html":{}}}],["food",{"_index":221,"title":{},"body":{"injectables/CartService.html":{},"miscellaneous/variables.html":{}}}],["foodapp",{"_index":842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fooditemname",{"_index":130,"title":{},"body":{"entities/Cart.html":{},"entities/Menu.html":{},"injectables/RestaurentService.html":{}}}],["fooditemprice",{"_index":131,"title":{},"body":{"entities/Cart.html":{},"entities/Menu.html":{}}}],["found",{"_index":258,"title":{},"body":{"injectables/CartService.html":{},"injectables/PaymentService.html":{}}}],["framework",{"_index":776,"title":{},"body":{"index.html":{}}}],["function",{"_index":713,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":759,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":308,"title":{},"body":{"classes/JwtServiceClass.html":{},"injectables/UserService.html":{}}}],["generates",{"_index":389,"title":{},"body":{"classes/Maintenance.html":{}}}],["get('getcartitems/:email",{"_index":177,"title":{},"body":{"controllers/CartController.html":{}}}],["get('getfoodbasedonrestaurent/:restaurentname",{"_index":483,"title":{},"body":{"controllers/RestaurentController.html":{}}}],["get('getrestaurent",{"_index":485,"title":{},"body":{"controllers/RestaurentController.html":{}}}],["getcart",{"_index":255,"title":{},"body":{"injectables/CartService.html":{},"injectables/PaymentService.html":{}}}],["getcart.length",{"_index":259,"title":{},"body":{"injectables/CartService.html":{}}}],["getcartitems",{"_index":166,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{}}}],["getcartitems(@param('email",{"_index":193,"title":{},"body":{"controllers/CartController.html":{}}}],["getcartitems(email",{"_index":176,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{}}}],["getfoods",{"_index":474,"title":{},"body":{"controllers/RestaurentController.html":{},"injectables/RestaurentService.html":{}}}],["getfoods(@param('restaurentname",{"_index":496,"title":{},"body":{"controllers/RestaurentController.html":{}}}],["getfoods(restaurentname",{"_index":482,"title":{},"body":{"controllers/RestaurentController.html":{},"injectables/RestaurentService.html":{}}}],["gethello",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getitem",{"_index":235,"title":{},"body":{"injectables/CartService.html":{},"injectables/RestaurentService.html":{}}}],["getitem.fooditemprice",{"_index":250,"title":{},"body":{"injectables/CartService.html":{}}}],["getmanager",{"_index":228,"title":{},"body":{"injectables/CartService.html":{},"injectables/PaymentService.html":{}}}],["getmanager().query",{"_index":263,"title":{},"body":{"injectables/CartService.html":{},"injectables/PaymentService.html":{}}}],["getrestarentnames",{"_index":475,"title":{},"body":{"controllers/RestaurentController.html":{},"injectables/RestaurentService.html":{}}}],["getrestaurent",{"_index":232,"title":{},"body":{"injectables/CartService.html":{},"injectables/RestaurentService.html":{}}}],["getrestaurent.restaurentname",{"_index":537,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["getting",{"_index":773,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":238,"title":{},"body":{"injectables/CartService.html":{},"injectables/PaymentService.html":{},"injectables/UserService.html":{}}}],["getuser.password",{"_index":657,"title":{},"body":{"injectables/UserService.html":{}}}],["grow",{"_index":805,"title":{},"body":{"index.html":{}}}],["hash",{"_index":646,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["hello",{"_index":126,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":11,"title":{},"body":{"entities/Address.html":{},"controllers/CartController.html":{},"modules/CartModule.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"modules/PaymentModule.html":{},"entities/Restaurent.html":{},"injectables/RestaurentService.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/TypeOrmInterface.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":292,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexception",{"_index":283,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":273,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httponly",{"_index":663,"title":{},"body":{"injectables/UserService.html":{}}}],["https://nestjs.com",{"_index":822,"title":{},"body":{"index.html":{}}}],["id",{"_index":17,"title":{},"body":{"entities/Address.html":{},"entities/Cart.html":{},"classes/JwtServiceClass.html":{},"entities/Menu.html":{},"entities/Restaurent.html":{},"entities/User.html":{}}}],["identifier",{"_index":694,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/ValidationPipe.html":{}}}],["import",{"_index":39,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Cart.html":{},"controllers/CartController.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Menu.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Restaurent.html":{},"controllers/RestaurentController.html":{},"modules/RestaurentModule.html":{},"injectables/RestaurentService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["imported",{"_index":331,"title":{},"body":{"classes/JwtServiceClass.html":{},"miscellaneous/functions.html":{}}}],["imports",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/CartModule.html":{},"modules/PaymentModule.html":{},"modules/RestaurentModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"entities/Address.html":{},"entities/Cart.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Menu.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/Restaurent.html":{},"controllers/RestaurentController.html":{},"injectables/RestaurentService.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":767,"title":{},"body":{"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Cart.html":{},"controllers/CartController.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Menu.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Restaurent.html":{},"controllers/RestaurentController.html":{},"modules/RestaurentModule.html":{},"injectables/RestaurentService.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["injectable",{"_index":123,"title":{"injectables/AppService.html":{},"injectables/CartService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/PaymentService.html":{},"injectables/RestaurentService.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}},"body":{"injectables/AppService.html":{},"injectables/CartService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/PaymentService.html":{},"injectables/RestaurentService.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["injectables",{"_index":124,"title":{},"body":{"injectables/AppService.html":{},"injectables/CartService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/PaymentService.html":{},"injectables/RestaurentService.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"overview.html":{}}}],["injectrepository",{"_index":227,"title":{},"body":{"injectables/CartService.html":{},"injectables/PaymentService.html":{},"injectables/RestaurentService.html":{},"injectables/UserService.html":{}}}],["injectrepository(address",{"_index":648,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(cart",{"_index":229,"title":{},"body":{"injectables/CartService.html":{},"injectables/PaymentService.html":{}}}],["injectrepository(menu",{"_index":523,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["injectrepository(restaurent",{"_index":522,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["injectrepository(user",{"_index":647,"title":{},"body":{"injectables/UserService.html":{}}}],["inputs",{"_index":672,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["installation",{"_index":785,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":787,"title":{},"body":{"index.html":{}}}],["interface",{"_index":539,"title":{"interfaces/SwaggerConfig.html":{}},"body":{"interfaces/SwaggerConfig.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":541,"title":{},"body":{"interfaces/SwaggerConfig.html":{}}}],["ip",{"_index":357,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["isactive",{"_index":132,"title":{},"body":{"entities/Cart.html":{},"injectables/CartService.html":{},"classes/Maintenance.html":{}}}],["isactive=replace(isactive,true,false",{"_index":439,"title":{},"body":{"injectables/PaymentService.html":{}}}],["isemail",{"_index":379,"title":{},"body":{"classes/LoginDto.html":{},"entities/Restaurent.html":{},"entities/User.html":{}}}],["isemail()@apiproperty",{"_index":375,"title":{},"body":{"classes/LoginDto.html":{}}}],["isint",{"_index":154,"title":{},"body":{"entities/Cart.html":{},"entities/Menu.html":{},"entities/User.html":{}}}],["isstring",{"_index":44,"title":{},"body":{"entities/Address.html":{},"entities/Cart.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Menu.html":{},"entities/Restaurent.html":{},"entities/User.html":{}}}],["isstring()@apiproperty",{"_index":377,"title":{},"body":{"classes/LoginDto.html":{}}}],["item",{"_index":517,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["itemprice",{"_index":248,"title":{},"body":{"injectables/CartService.html":{}}}],["items",{"_index":173,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"miscellaneous/variables.html":{}}}],["join",{"_index":812,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":306,"title":{},"body":{"classes/JwtServiceClass.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["jwtmodule",{"_index":622,"title":{},"body":{"modules/UserModule.html":{}}}],["jwtmodule.register",{"_index":624,"title":{},"body":{"modules/UserModule.html":{}}}],["jwtservice",{"_index":314,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["jwtserviceclass",{"_index":209,"title":{"classes/JwtServiceClass.html":{}},"body":{"modules/CartModule.html":{},"classes/JwtServiceClass.html":{},"modules/PaymentModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["kamil",{"_index":819,"title":{},"body":{"index.html":{}}}],["length",{"_index":365,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["library",{"_index":332,"title":{},"body":{"classes/JwtServiceClass.html":{},"miscellaneous/functions.html":{}}}],["license",{"_index":825,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":803,"title":{},"body":{"index.html":{}}}],["line",{"_index":576,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["list",{"_index":531,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["localhost",{"_index":839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["location",{"_index":446,"title":{},"body":{"entities/Restaurent.html":{}}}],["logger",{"_index":347,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["logger(loggermiddleware.name",{"_index":354,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["loggermiddleware",{"_index":103,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["logics",{"_index":429,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/RestaurentService.html":{}}}],["login",{"_index":641,"title":{},"body":{"injectables/UserService.html":{}}}],["logindto",{"_index":368,"title":{"classes/LoginDto.html":{}},"body":{"classes/LoginDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["loginuser",{"_index":597,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["loginuser(data",{"_index":605,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["logout",{"_index":345,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["maintain",{"_index":374,"title":{},"body":{"classes/LoginDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["maintanance",{"_index":382,"title":{},"body":{"classes/Maintenance.html":{}}}],["maintenance",{"_index":380,"title":{"classes/Maintenance.html":{}},"body":{"classes/Maintenance.html":{},"entities/Restaurent.html":{},"entities/User.html":{},"coverage.html":{}}}],["maintenance.entity",{"_index":462,"title":{},"body":{"entities/Restaurent.html":{},"entities/User.html":{}}}],["make",{"_index":434,"title":{},"body":{"injectables/PaymentService.html":{}}}],["makepayment",{"_index":430,"title":{},"body":{"injectables/PaymentService.html":{}}}],["makepayment(email",{"_index":432,"title":{},"body":{"injectables/PaymentService.html":{}}}],["manytoone",{"_index":41,"title":{},"body":{"entities/Address.html":{},"entities/Cart.html":{},"entities/Menu.html":{}}}],["manytoone(undefined",{"_index":36,"title":{},"body":{"entities/Address.html":{},"entities/Cart.html":{},"entities/Menu.html":{}}}],["match",{"_index":655,"title":{},"body":{"injectables/UserService.html":{}}}],["matching",{"_index":51,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Cart.html":{},"controllers/CartController.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Menu.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Restaurent.html":{},"controllers/RestaurentController.html":{},"modules/RestaurentModule.html":{},"injectables/RestaurentService.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["meimport",{"_index":327,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["menu",{"_index":133,"title":{"entities/Menu.html":{}},"body":{"entities/Cart.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"entities/Menu.html":{},"entities/Restaurent.html":{},"controllers/RestaurentController.html":{},"modules/RestaurentModule.html":{},"injectables/RestaurentService.html":{},"coverage.html":{}}}],["menu.cart",{"_index":145,"title":{},"body":{"entities/Cart.html":{}}}],["menu.entity",{"_index":155,"title":{},"body":{"entities/Cart.html":{},"entities/Restaurent.html":{}}}],["menu.restaurent",{"_index":453,"title":{},"body":{"entities/Restaurent.html":{},"injectables/RestaurentService.html":{}}}],["menurepository",{"_index":509,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["message",{"_index":303,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{}}}],["metadata",{"_index":749,"title":{},"body":{"dependencies.html":{}}}],["metatype",{"_index":677,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["method",{"_index":57,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{}}}],["methods",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/RestaurentController.html":{},"injectables/RestaurentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["mian",{"_index":762,"title":{},"body":{"miscellaneous/functions.html":{}}}],["middleware",{"_index":348,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["middlewareconsumer",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["miscellaneous",{"_index":758,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":802,"title":{},"body":{"index.html":{}}}],["mode",{"_index":792,"title":{},"body":{"index.html":{}}}],["module",{"_index":66,"title":{"modules/AppModule.html":{},"modules/CartModule.html":{},"modules/PaymentModule.html":{},"modules/RestaurentModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CartModule.html":{},"modules/PaymentModule.html":{},"modules/RestaurentModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":68,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/CartModule.html":{},"modules/PaymentModule.html":{},"modules/RestaurentModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/cart/cart.module",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/payment/payment.module",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/restaurent/restaurent.module",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/user/user.module",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":815,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":9,"title":{},"body":{"entities/Address.html":{}}}],["mysql",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["mysql2",{"_index":744,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":820,"title":{},"body":{"index.html":{}}}],["name",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/RestaurentController.html":{},"injectables/RestaurentService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{}}}],["nest",{"_index":783,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":824,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":769,"title":{},"body":{"miscellaneous/functions.html":{}}}],["nestjs/common",{"_index":58,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/CartController.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"controllers/RestaurentController.html":{},"modules/RestaurentModule.html":{},"injectables/RestaurentService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":330,"title":{},"body":{"classes/JwtServiceClass.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":48,"title":{},"body":{"entities/Address.html":{},"entities/Cart.html":{},"controllers/CartController.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Menu.html":{},"controllers/PaymentController.html":{},"entities/Restaurent.html":{},"controllers/RestaurentController.html":{},"entities/User.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"modules/RestaurentModule.html":{},"injectables/RestaurentService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":356,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["nestmodule",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":157,"title":{},"body":{"entities/Cart.html":{},"injectables/CartService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"classes/Maintenance.html":{},"injectables/PaymentService.html":{},"entities/Restaurent.html":{},"injectables/RestaurentService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["newdata",{"_index":525,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["next",{"_index":351,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["nextfunction",{"_index":352,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["node.js",{"_index":775,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":226,"title":{},"body":{"injectables/CartService.html":{},"injectables/RestaurentService.html":{}}}],["notfoundexception('incorrect",{"_index":241,"title":{},"body":{"injectables/CartService.html":{}}}],["notfoundexception('restaurent",{"_index":529,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["notfoundexception('user",{"_index":257,"title":{},"body":{"injectables/CartService.html":{}}}],["notfoundexception('your",{"_index":260,"title":{},"body":{"injectables/CartService.html":{}}}],["npm",{"_index":786,"title":{},"body":{"index.html":{}}}],["null",{"_index":467,"title":{},"body":{"entities/Restaurent.html":{},"entities/User.html":{}}}],["number",{"_index":30,"title":{},"body":{"entities/Address.html":{},"entities/Cart.html":{},"entities/Menu.html":{},"entities/Restaurent.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"injectables/ValidationPipe.html":{}}}],["object",{"_index":371,"title":{},"body":{"classes/LoginDto.html":{},"injectables/ValidationPipe.html":{}}}],["object.assign(restaurent",{"_index":526,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["object.assign(user",{"_index":652,"title":{},"body":{"injectables/UserService.html":{}}}],["onetomany",{"_index":408,"title":{},"body":{"entities/Menu.html":{},"entities/Restaurent.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":398,"title":{},"body":{"entities/Menu.html":{},"entities/Restaurent.html":{},"entities/User.html":{}}}],["open",{"_index":804,"title":{},"body":{"index.html":{}}}],["openapiobject",{"_index":771,"title":{},"body":{"miscellaneous/functions.html":{}}}],["optional",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/RestaurentController.html":{},"injectables/RestaurentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{}}}],["orderdate",{"_index":134,"title":{},"body":{"entities/Cart.html":{}}}],["originalurl",{"_index":358,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["out",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/CartModule.html":{},"modules/PaymentModule.html":{},"modules/RestaurentModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":829,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":732,"title":{"dependencies.html":{}},"body":{}}],["paid",{"_index":444,"title":{},"body":{"injectables/PaymentService.html":{}}}],["param",{"_index":181,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"classes/JwtServiceClass.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/RestaurentController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["param('email",{"_index":190,"title":{},"body":{"controllers/CartController.html":{},"controllers/UserController.html":{}}}],["parameters",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/RestaurentController.html":{},"injectables/RestaurentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{}}}],["parser",{"_index":742,"title":{},"body":{"dependencies.html":{}}}],["passport",{"_index":746,"title":{},"body":{"dependencies.html":{}}}],["passthrough",{"_index":614,"title":{},"body":{"controllers/UserController.html":{}}}],["password",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"classes/LoginDto.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":301,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["payment",{"_index":413,"title":{},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{}}}],["payment.controller",{"_index":427,"title":{},"body":{"modules/PaymentModule.html":{}}}],["payment.service",{"_index":419,"title":{},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{}}}],["payment_status",{"_index":441,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentcontroller",{"_index":411,"title":{"controllers/PaymentController.html":{}},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"coverage.html":{}}}],["paymentmodule",{"_index":74,"title":{"modules/PaymentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"modules.html":{},"overview.html":{}}}],["paymentservice",{"_index":418,"title":{"injectables/PaymentService.html":{}},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"coverage.html":{},"overview.html":{}}}],["phonenumber",{"_index":447,"title":{},"body":{"entities/Restaurent.html":{},"entities/User.html":{}}}],["pincode",{"_index":18,"title":{},"body":{"entities/Address.html":{}}}],["pipetransform",{"_index":681,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["place",{"_index":307,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["plaintoclass",{"_index":682,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":685,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["please",{"_index":813,"title":{},"body":{"index.html":{}}}],["port",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"classes/TypeOrmInterface.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":182,"title":{},"body":{"controllers/CartController.html":{},"controllers/PaymentController.html":{},"controllers/RestaurentController.html":{},"controllers/UserController.html":{}}}],["post('addfood",{"_index":477,"title":{},"body":{"controllers/RestaurentController.html":{}}}],["post('additemsintocart/:email",{"_index":169,"title":{},"body":{"controllers/CartController.html":{}}}],["post('address/:email",{"_index":599,"title":{},"body":{"controllers/UserController.html":{}}}],["post('addrestaurest",{"_index":480,"title":{},"body":{"controllers/RestaurentController.html":{}}}],["post('login",{"_index":606,"title":{},"body":{"controllers/UserController.html":{}}}],["post('payment/:email",{"_index":416,"title":{},"body":{"controllers/PaymentController.html":{}}}],["post('register",{"_index":602,"title":{},"body":{"controllers/UserController.html":{}}}],["prefix",{"_index":161,"title":{},"body":{"controllers/CartController.html":{},"controllers/PaymentController.html":{},"controllers/RestaurentController.html":{},"controllers/UserController.html":{}}}],["price",{"_index":262,"title":{},"body":{"injectables/CartService.html":{}}}],["price[0",{"_index":268,"title":{},"body":{"injectables/CartService.html":{}}}],["primarygeneratedcolumn",{"_index":31,"title":{},"body":{"entities/Address.html":{},"entities/Cart.html":{},"entities/Menu.html":{},"entities/Restaurent.html":{},"entities/User.html":{}}}],["private",{"_index":230,"title":{},"body":{"injectables/CartService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/PaymentService.html":{},"injectables/RestaurentService.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["production",{"_index":794,"title":{},"body":{"index.html":{}}}],["program",{"_index":763,"title":{},"body":{"miscellaneous/functions.html":{}}}],["progressive",{"_index":774,"title":{},"body":{"index.html":{}}}],["project",{"_index":279,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"index.html":{}}}],["promise",{"_index":222,"title":{},"body":{"injectables/CartService.html":{},"classes/JwtServiceClass.html":{}}}],["properties",{"_index":13,"title":{},"body":{"entities/Address.html":{},"entities/Cart.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Menu.html":{},"entities/Restaurent.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{}}}],["property",{"_index":373,"title":{},"body":{"classes/LoginDto.html":{}}}],["providers",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/CartModule.html":{},"modules/PaymentModule.html":{},"modules/RestaurentModule.html":{},"modules/UserModule.html":{}}}],["quantity",{"_index":135,"title":{},"body":{"entities/Cart.html":{}}}],["quentity",{"_index":246,"title":{},"body":{"injectables/CartService.html":{}}}],["rating",{"_index":448,"title":{},"body":{"entities/Restaurent.html":{}}}],["read",{"_index":814,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"classes/JwtServiceClass.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/RestaurentController.html":{},"injectables/RestaurentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["recived",{"_index":337,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["reflect",{"_index":748,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":530,"title":{},"body":{"injectables/RestaurentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["registeruser",{"_index":632,"title":{},"body":{"injectables/UserService.html":{}}}],["registeruser(data",{"_index":644,"title":{},"body":{"injectables/UserService.html":{}}}],["related",{"_index":200,"title":{},"body":{"modules/CartModule.html":{},"injectables/LoggerMiddleware.html":{},"classes/Maintenance.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Restaurent.html":{},"injectables/RestaurentService.html":{},"interfaces/SwaggerConfig.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["repository",{"_index":217,"title":{},"body":{"injectables/CartService.html":{},"injectables/PaymentService.html":{},"injectables/RestaurentService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["request",{"_index":287,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{}}}],["request.get('user",{"_index":360,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["request.url",{"_index":302,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["require('bcryptjs",{"_index":582,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":372,"title":{},"body":{"classes/LoginDto.html":{}}}],["requires",{"_index":580,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["res",{"_index":608,"title":{},"body":{"controllers/UserController.html":{}}}],["reset",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/CartModule.html":{},"modules/PaymentModule.html":{},"modules/RestaurentModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":288,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["response.clearcookie('jwt",{"_index":343,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["response.cookie('jwt",{"_index":662,"title":{},"body":{"injectables/UserService.html":{}}}],["response.get('content",{"_index":364,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["response.on('finish",{"_index":362,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["response.status(status).json",{"_index":297,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["restaurent",{"_index":205,"title":{"entities/Restaurent.html":{}},"body":{"modules/CartModule.html":{},"entities/Menu.html":{},"entities/Restaurent.html":{},"controllers/RestaurentController.html":{},"modules/RestaurentModule.html":{},"injectables/RestaurentService.html":{},"coverage.html":{}}}],["restaurent.addmenudata(menu",{"_index":532,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["restaurent.controller",{"_index":501,"title":{},"body":{"modules/RestaurentModule.html":{}}}],["restaurent.createdat",{"_index":524,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["restaurent.entity",{"_index":409,"title":{},"body":{"entities/Menu.html":{}}}],["restaurent.menu",{"_index":405,"title":{},"body":{"entities/Menu.html":{}}}],["restaurent.service",{"_index":488,"title":{},"body":{"controllers/RestaurentController.html":{},"modules/RestaurentModule.html":{}}}],["restaurent/restaurent.service",{"_index":203,"title":{},"body":{"modules/CartModule.html":{},"injectables/CartService.html":{}}}],["restaurentcontroller",{"_index":470,"title":{"controllers/RestaurentController.html":{}},"body":{"controllers/RestaurentController.html":{},"modules/RestaurentModule.html":{},"coverage.html":{}}}],["restaurentemail",{"_index":449,"title":{},"body":{"entities/Restaurent.html":{}}}],["restaurentmodule",{"_index":75,"title":{"modules/RestaurentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RestaurentModule.html":{},"modules.html":{},"overview.html":{}}}],["restaurentname",{"_index":136,"title":{},"body":{"entities/Cart.html":{},"entities/Menu.html":{},"entities/Restaurent.html":{},"controllers/RestaurentController.html":{},"injectables/RestaurentService.html":{}}}],["restaurentrepository",{"_index":511,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["restaurentservice",{"_index":197,"title":{"injectables/RestaurentService.html":{}},"body":{"modules/CartModule.html":{},"injectables/CartService.html":{},"controllers/RestaurentController.html":{},"modules/RestaurentModule.html":{},"injectables/RestaurentService.html":{},"coverage.html":{},"overview.html":{}}}],["result",{"_index":267,"title":{},"body":{"injectables/CartService.html":{},"injectables/PaymentService.html":{},"injectables/UserService.html":{}}}],["result.totalprice",{"_index":272,"title":{},"body":{"injectables/CartService.html":{}}}],["results",{"_index":50,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Cart.html":{},"controllers/CartController.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Menu.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Restaurent.html":{},"controllers/RestaurentController.html":{},"modules/RestaurentModule.html":{},"injectables/RestaurentService.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/RestaurentController.html":{},"injectables/RestaurentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["returns",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/RestaurentController.html":{},"injectables/RestaurentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":751,"title":{},"body":{"dependencies.html":{}}}],["root",{"_index":841,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":789,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":753,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":604,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["scalable",{"_index":779,"title":{},"body":{"index.html":{}}}],["secrect",{"_index":626,"title":{},"body":{"modules/UserModule.html":{}}}],["secret",{"_index":625,"title":{},"body":{"modules/UserModule.html":{}}}],["select",{"_index":264,"title":{},"body":{"injectables/CartService.html":{}}}],["server",{"_index":780,"title":{},"body":{"index.html":{}}}],["service",{"_index":214,"title":{},"body":{"injectables/CartService.html":{},"classes/JwtServiceClass.html":{},"injectables/PaymentService.html":{}}}],["set",{"_index":438,"title":{},"body":{"injectables/PaymentService.html":{}}}],["show",{"_index":325,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["side",{"_index":781,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":627,"title":{},"body":{"modules/UserModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Cart.html":{},"controllers/CartController.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Menu.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Restaurent.html":{},"controllers/RestaurentController.html":{},"modules/RestaurentModule.html":{},"injectables/RestaurentService.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"index.html":{}}}],["sponsors",{"_index":807,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":760,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../swagger.config.ts",{"_index":835,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../swagger.ts",{"_index":761,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../typeorm.config.ts",{"_index":836,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.entity.ts",{"_index":833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.service.ts",{"_index":834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":55,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:33",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":125,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/common/filters/exception.filter.ts",{"_index":275,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/common/filters/exception.filter.ts:13",{"_index":285,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["src/common/middleware/logger.middleware.ts",{"_index":346,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/middleware/logger.middleware.ts:10",{"_index":353,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/common/middleware/logger.middleware.ts:8",{"_index":355,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/common/pipes/validation.pipes.ts",{"_index":670,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/common/pipes/validation.pipes.ts:14",{"_index":680,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/common/pipes/validation.pipes.ts:26",{"_index":676,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/common/providers/jwt.service.ts",{"_index":305,"title":{},"body":{"classes/JwtServiceClass.html":{},"coverage.html":{}}}],["src/common/providers/jwt.service.ts:17",{"_index":317,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["src/common/providers/jwt.service.ts:27",{"_index":335,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["src/common/providers/jwt.service.ts:44",{"_index":322,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["src/common/providers/jwt.service.ts:8",{"_index":315,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["src/common/typeorm/typeorm.config.ts",{"_index":702,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/typeorm/typeorm.interface.ts",{"_index":550,"title":{},"body":{"classes/TypeOrmInterface.html":{},"coverage.html":{}}}],["src/common/typeorm/typeorm.interface.ts:5",{"_index":552,"title":{},"body":{"classes/TypeOrmInterface.html":{}}}],["src/common/typeorm/typeorm.interface.ts:6",{"_index":554,"title":{},"body":{"classes/TypeOrmInterface.html":{}}}],["src/common/typeorm/typeorm.interface.ts:7",{"_index":555,"title":{},"body":{"classes/TypeOrmInterface.html":{}}}],["src/common/typeorm/typeorm.interface.ts:8",{"_index":553,"title":{},"body":{"classes/TypeOrmInterface.html":{}}}],["src/common/typeorm/typeorm.interface.ts:9",{"_index":551,"title":{},"body":{"classes/TypeOrmInterface.html":{}}}],["src/config/swagger/swagger.config.ts",{"_index":708,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/swagger/swagger.interface.ts",{"_index":542,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"coverage.html":{}}}],["src/config/swagger/swagger.ts",{"_index":712,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/entities/address.entity.ts",{"_index":6,"title":{},"body":{"entities/Address.html":{},"coverage.html":{}}}],["src/entities/address.entity.ts:11",{"_index":32,"title":{},"body":{"entities/Address.html":{}}}],["src/entities/address.entity.ts:16",{"_index":29,"title":{},"body":{"entities/Address.html":{}}}],["src/entities/address.entity.ts:21",{"_index":35,"title":{},"body":{"entities/Address.html":{}}}],["src/entities/address.entity.ts:26",{"_index":27,"title":{},"body":{"entities/Address.html":{}}}],["src/entities/address.entity.ts:31",{"_index":34,"title":{},"body":{"entities/Address.html":{}}}],["src/entities/address.entity.ts:36",{"_index":28,"title":{},"body":{"entities/Address.html":{}}}],["src/entities/address.entity.ts:41",{"_index":33,"title":{},"body":{"entities/Address.html":{}}}],["src/entities/address.entity.ts:44",{"_index":38,"title":{},"body":{"entities/Address.html":{}}}],["src/entities/cart.entity.ts",{"_index":129,"title":{},"body":{"entities/Cart.html":{},"coverage.html":{}}}],["src/entities/cart.entity.ts:13",{"_index":141,"title":{},"body":{"entities/Cart.html":{}}}],["src/entities/cart.entity.ts:16",{"_index":140,"title":{},"body":{"entities/Cart.html":{}}}],["src/entities/cart.entity.ts:20",{"_index":139,"title":{},"body":{"entities/Cart.html":{}}}],["src/entities/cart.entity.ts:24",{"_index":150,"title":{},"body":{"entities/Cart.html":{}}}],["src/entities/cart.entity.ts:28",{"_index":149,"title":{},"body":{"entities/Cart.html":{}}}],["src/entities/cart.entity.ts:31",{"_index":151,"title":{},"body":{"entities/Cart.html":{}}}],["src/entities/cart.entity.ts:34",{"_index":144,"title":{},"body":{"entities/Cart.html":{}}}],["src/entities/cart.entity.ts:37",{"_index":148,"title":{},"body":{"entities/Cart.html":{}}}],["src/entities/cart.entity.ts:40",{"_index":153,"title":{},"body":{"entities/Cart.html":{}}}],["src/entities/cart.entity.ts:43",{"_index":146,"title":{},"body":{"entities/Cart.html":{}}}],["src/entities/maintenance.entity.ts",{"_index":381,"title":{},"body":{"classes/Maintenance.html":{},"coverage.html":{}}}],["src/entities/maintenance.entity.ts:13",{"_index":392,"title":{},"body":{"classes/Maintenance.html":{}}}],["src/entities/maintenance.entity.ts:18",{"_index":393,"title":{},"body":{"classes/Maintenance.html":{}}}],["src/entities/maintenance.entity.ts:23",{"_index":388,"title":{},"body":{"classes/Maintenance.html":{}}}],["src/entities/maintenance.entity.ts:28",{"_index":394,"title":{},"body":{"classes/Maintenance.html":{}}}],["src/entities/maintenance.entity.ts:33",{"_index":390,"title":{},"body":{"classes/Maintenance.html":{}}}],["src/entities/menu.entity.ts",{"_index":396,"title":{},"body":{"entities/Menu.html":{},"coverage.html":{}}}],["src/entities/menu.entity.ts:19",{"_index":404,"title":{},"body":{"entities/Menu.html":{}}}],["src/entities/menu.entity.ts:24",{"_index":407,"title":{},"body":{"entities/Menu.html":{}}}],["src/entities/menu.entity.ts:29",{"_index":401,"title":{},"body":{"entities/Menu.html":{}}}],["src/entities/menu.entity.ts:34",{"_index":403,"title":{},"body":{"entities/Menu.html":{}}}],["src/entities/menu.entity.ts:39",{"_index":400,"title":{},"body":{"entities/Menu.html":{}}}],["src/entities/menu.entity.ts:42",{"_index":406,"title":{},"body":{"entities/Menu.html":{}}}],["src/entities/menu.entity.ts:45",{"_index":399,"title":{},"body":{"entities/Menu.html":{}}}],["src/entities/restaurent.entity",{"_index":487,"title":{},"body":{"controllers/RestaurentController.html":{}}}],["src/entities/restaurent.entity.ts",{"_index":445,"title":{},"body":{"entities/Restaurent.html":{},"coverage.html":{}}}],["src/entities/restaurent.entity.ts:13",{"_index":451,"title":{},"body":{"entities/Restaurent.html":{}}}],["src/entities/restaurent.entity.ts:18",{"_index":461,"title":{},"body":{"entities/Restaurent.html":{}}}],["src/entities/restaurent.entity.ts:23",{"_index":460,"title":{},"body":{"entities/Restaurent.html":{}}}],["src/entities/restaurent.entity.ts:28",{"_index":457,"title":{},"body":{"entities/Restaurent.html":{}}}],["src/entities/restaurent.entity.ts:33",{"_index":452,"title":{},"body":{"entities/Restaurent.html":{}}}],["src/entities/restaurent.entity.ts:38",{"_index":458,"title":{},"body":{"entities/Restaurent.html":{}}}],["src/entities/restaurent.entity.ts:43",{"_index":450,"title":{},"body":{"entities/Restaurent.html":{}}}],["src/entities/restaurent.entity.ts:46",{"_index":454,"title":{},"body":{"entities/Restaurent.html":{}}}],["src/entities/user.entity",{"_index":328,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["src/entities/user.entity.ts",{"_index":556,"title":{},"body":{"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/entities/user.entity.ts:22",{"_index":565,"title":{},"body":{"entities/User.html":{}}}],["src/entities/user.entity.ts:27",{"_index":567,"title":{},"body":{"entities/User.html":{}}}],["src/entities/user.entity.ts:32",{"_index":564,"title":{},"body":{"entities/User.html":{}}}],["src/entities/user.entity.ts:37",{"_index":570,"title":{},"body":{"entities/User.html":{}}}],["src/entities/user.entity.ts:42",{"_index":561,"title":{},"body":{"entities/User.html":{}}}],["src/entities/user.entity.ts:47",{"_index":568,"title":{},"body":{"entities/User.html":{}}}],["src/entities/user.entity.ts:55",{"_index":559,"title":{},"body":{"entities/User.html":{}}}],["src/entities/user.entity.ts:65",{"_index":562,"title":{},"body":{"entities/User.html":{}}}],["src/main.ts",{"_index":728,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/cart/cart.controller.ts",{"_index":160,"title":{},"body":{"controllers/CartController.html":{},"coverage.html":{}}}],["src/modules/cart/cart.controller.ts:21",{"_index":170,"title":{},"body":{"controllers/CartController.html":{}}}],["src/modules/cart/cart.controller.ts:31",{"_index":178,"title":{},"body":{"controllers/CartController.html":{}}}],["src/modules/cart/cart.module.ts",{"_index":199,"title":{},"body":{"modules/CartModule.html":{}}}],["src/modules/cart/cart.service.ts",{"_index":213,"title":{},"body":{"injectables/CartService.html":{},"coverage.html":{}}}],["src/modules/cart/cart.service.ts:17",{"_index":218,"title":{},"body":{"injectables/CartService.html":{}}}],["src/modules/cart/cart.service.ts:29",{"_index":220,"title":{},"body":{"injectables/CartService.html":{}}}],["src/modules/cart/cart.service.ts:63",{"_index":223,"title":{},"body":{"injectables/CartService.html":{}}}],["src/modules/payment/payment.controller.ts",{"_index":412,"title":{},"body":{"controllers/PaymentController.html":{},"coverage.html":{}}}],["src/modules/payment/payment.controller.ts:19",{"_index":417,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/modules/payment/payment.module.ts",{"_index":426,"title":{},"body":{"modules/PaymentModule.html":{}}}],["src/modules/payment/payment.service.ts",{"_index":428,"title":{},"body":{"injectables/PaymentService.html":{},"coverage.html":{}}}],["src/modules/payment/payment.service.ts:10",{"_index":431,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/payment/payment.service.ts:21",{"_index":433,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/restaurent/restaurent.controller.ts",{"_index":471,"title":{},"body":{"controllers/RestaurentController.html":{},"coverage.html":{}}}],["src/modules/restaurent/restaurent.controller.ts:13",{"_index":481,"title":{},"body":{"controllers/RestaurentController.html":{}}}],["src/modules/restaurent/restaurent.controller.ts:18",{"_index":478,"title":{},"body":{"controllers/RestaurentController.html":{}}}],["src/modules/restaurent/restaurent.controller.ts:23",{"_index":486,"title":{},"body":{"controllers/RestaurentController.html":{}}}],["src/modules/restaurent/restaurent.controller.ts:28",{"_index":484,"title":{},"body":{"controllers/RestaurentController.html":{}}}],["src/modules/restaurent/restaurent.module.ts",{"_index":500,"title":{},"body":{"modules/RestaurentModule.html":{}}}],["src/modules/restaurent/restaurent.service.ts",{"_index":503,"title":{},"body":{"injectables/RestaurentService.html":{},"coverage.html":{}}}],["src/modules/restaurent/restaurent.service.ts:10",{"_index":510,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["src/modules/restaurent/restaurent.service.ts:18",{"_index":514,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["src/modules/restaurent/restaurent.service.ts:25",{"_index":513,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["src/modules/restaurent/restaurent.service.ts:40",{"_index":521,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["src/modules/restaurent/restaurent.service.ts:44",{"_index":520,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["src/modules/restaurent/restaurent.service.ts:56",{"_index":519,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["src/modules/restaurent/restaurent.service.ts:63",{"_index":516,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["src/modules/user/dto/login.dto.ts",{"_index":369,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/modules/user/dto/login.dto.ts:13",{"_index":376,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/user/dto/login.dto.ts:20",{"_index":378,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/user/user.controller.ts",{"_index":594,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/modules/user/user.controller.ts:18",{"_index":603,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:23",{"_index":607,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:31",{"_index":600,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.module.ts",{"_index":620,"title":{},"body":{"modules/UserModule.html":{}}}],["src/modules/user/user.service.ts",{"_index":630,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/user/user.service.ts:14",{"_index":635,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:27",{"_index":645,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:39",{"_index":640,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:51",{"_index":637,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:66",{"_index":639,"title":{},"body":{"injectables/UserService.html":{}}}],["ssageimport",{"_index":329,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["start",{"_index":790,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":793,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":795,"title":{},"body":{"index.html":{}}}],["started",{"_index":765,"title":{"index.html":{}},"body":{"miscellaneous/functions.html":{}}}],["starter",{"_index":784,"title":{},"body":{"index.html":{}}}],["state",{"_index":19,"title":{},"body":{"entities/Address.html":{}}}],["statements",{"_index":695,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":295,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["statuscode",{"_index":298,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{}}}],["stay",{"_index":816,"title":{},"body":{"index.html":{}}}],["streetname",{"_index":20,"title":{},"body":{"entities/Address.html":{}}}],["string",{"_index":23,"title":{},"body":{"entities/Address.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/Cart.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"classes/JwtServiceClass.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Menu.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/Restaurent.html":{},"controllers/RestaurentController.html":{},"injectables/RestaurentService.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["strong",{"_index":573,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["strongpassword",{"_index":583,"title":{},"body":{"entities/User.html":{}}}],["success",{"_index":326,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["successfully",{"_index":344,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["succsfully",{"_index":443,"title":{},"body":{"injectables/PaymentService.html":{}}}],["sum(totalprice",{"_index":265,"title":{},"body":{"injectables/CartService.html":{}}}],["support",{"_index":808,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":827,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":543,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["swagger_config",{"_index":709,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggerconfig",{"_index":540,"title":{"interfaces/SwaggerConfig.html":{}},"body":{"interfaces/SwaggerConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["synchronize",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":731,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":730,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":546,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["taken",{"_index":320,"title":{},"body":{"classes/JwtServiceClass.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["teken",{"_index":642,"title":{},"body":{"injectables/UserService.html":{}}}],["template",{"_index":838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test",{"_index":798,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":801,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":800,"title":{},"body":{"index.html":{}}}],["tests",{"_index":797,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":806,"title":{},"body":{"index.html":{}}}],["this.address",{"_index":588,"title":{},"body":{"entities/User.html":{}}}],["this.address.push(address",{"_index":589,"title":{},"body":{"entities/User.html":{}}}],["this.addressrepository.save(address",{"_index":667,"title":{},"body":{"injectables/UserService.html":{}}}],["this.appservice.gethello",{"_index":65,"title":{},"body":{"controllers/AppController.html":{}}}],["this.cart",{"_index":591,"title":{},"body":{"entities/User.html":{}}}],["this.cart.push(cart",{"_index":592,"title":{},"body":{"entities/User.html":{}}}],["this.cartrepository.find",{"_index":256,"title":{},"body":{"injectables/CartService.html":{},"injectables/PaymentService.html":{}}}],["this.cartrepository.save(cart",{"_index":254,"title":{},"body":{"injectables/CartService.html":{}}}],["this.cartservice.additemsintocart(data",{"_index":192,"title":{},"body":{"controllers/CartController.html":{}}}],["this.cartservice.getcartitems(email",{"_index":194,"title":{},"body":{"controllers/CartController.html":{}}}],["this.findrestaurest(data.restaurentname",{"_index":528,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["this.finduser(data.email",{"_index":654,"title":{},"body":{"injectables/UserService.html":{}}}],["this.finduser(email",{"_index":664,"title":{},"body":{"injectables/UserService.html":{}}}],["this.jwtservice.signasync",{"_index":338,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":341,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["this.jwtserviceclass.createjwttoken(getuser",{"_index":661,"title":{},"body":{"injectables/UserService.html":{}}}],["this.logger.log",{"_index":366,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["this.menu",{"_index":466,"title":{},"body":{"entities/Restaurent.html":{}}}],["this.menu.push(menu",{"_index":469,"title":{},"body":{"entities/Restaurent.html":{}}}],["this.menurepository.find",{"_index":536,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["this.menurepository.findone",{"_index":538,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["this.menurepository.save(menu",{"_index":533,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["this.password",{"_index":584,"title":{},"body":{"entities/User.html":{}}}],["this.paymentservice.makepayment(email",{"_index":423,"title":{},"body":{"controllers/PaymentController.html":{}}}],["this.restaurentrepository.find",{"_index":534,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["this.restaurentrepository.findone",{"_index":535,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["this.restaurentrepository.save(newdata",{"_index":527,"title":{},"body":{"injectables/RestaurentService.html":{}}}],["this.restaurentservice.addmenu(data",{"_index":494,"title":{},"body":{"controllers/RestaurentController.html":{}}}],["this.restaurentservice.addrestaurest(data",{"_index":492,"title":{},"body":{"controllers/RestaurentController.html":{}}}],["this.restaurentservice.finditem",{"_index":236,"title":{},"body":{"injectables/CartService.html":{}}}],["this.restaurentservice.findrestaurest",{"_index":233,"title":{},"body":{"injectables/CartService.html":{}}}],["this.restaurentservice.getfoods(restaurentname",{"_index":497,"title":{},"body":{"controllers/RestaurentController.html":{}}}],["this.restaurentservice.getrestarentnames",{"_index":495,"title":{},"body":{"controllers/RestaurentController.html":{}}}],["this.tovalidate(metatype",{"_index":684,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.userrepository.findone",{"_index":668,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(userdata",{"_index":653,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.addaddress(data",{"_index":617,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.finduser(email",{"_index":239,"title":{},"body":{"injectables/CartService.html":{},"injectables/PaymentService.html":{}}}],["this.userservice.loginuser(data",{"_index":615,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.registeruser(data",{"_index":613,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":240,"title":{},"body":{"injectables/CartService.html":{},"classes/JwtServiceClass.html":{},"injectables/PaymentService.html":{},"injectables/RestaurentService.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["timestamp",{"_index":299,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["title",{"_index":547,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["token",{"_index":319,"title":{},"body":{"classes/JwtServiceClass.html":{},"injectables/UserService.html":{}}}],["tokens",{"_index":309,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["total_price_in_your_cart_items",{"_index":271,"title":{},"body":{"injectables/CartService.html":{}}}],["totalprice",{"_index":137,"title":{},"body":{"entities/Cart.html":{},"injectables/CartService.html":{}}}],["touch",{"_index":817,"title":{},"body":{"index.html":{}}}],["tovalidate",{"_index":673,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":675,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transfer",{"_index":370,"title":{},"body":{"classes/LoginDto.html":{}}}],["transform",{"_index":674,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transform(value",{"_index":678,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":683,"title":{},"body":{"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["true",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"entities/Cart.html":{},"injectables/CartService.html":{},"classes/Maintenance.html":{},"entities/Restaurent.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["true})@apiproperty()@isemail",{"_index":563,"title":{},"body":{"entities/User.html":{}}}],["true})@apiproperty()@isstring",{"_index":569,"title":{},"body":{"entities/User.html":{}}}],["true})@isemail()@apiproperty",{"_index":459,"title":{},"body":{"entities/Restaurent.html":{}}}],["true})@isstring()@apiproperty",{"_index":456,"title":{},"body":{"entities/Restaurent.html":{}}}],["try",{"_index":340,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["twitter",{"_index":823,"title":{},"body":{"index.html":{}}}],["type",{"_index":21,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"entities/Cart.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Menu.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/Restaurent.html":{},"controllers/RestaurentController.html":{},"injectables/RestaurentService.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":42,"title":{},"body":{"entities/Address.html":{},"entities/Cart.html":{},"injectables/CartService.html":{},"classes/Maintenance.html":{},"entities/Menu.html":{},"injectables/PaymentService.html":{},"entities/Restaurent.html":{},"injectables/RestaurentService.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["typeormconfig",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormconfig.database",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormconfig.host",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormconfig.password",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormconfig.port",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormconfig.username",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["typeorminterface",{"_index":549,"title":{"classes/TypeOrmInterface.html":{}},"body":{"classes/TypeOrmInterface.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormmodule",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/CartModule.html":{},"modules/PaymentModule.html":{},"modules/RestaurentModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([cart",{"_index":212,"title":{},"body":{"modules/CartModule.html":{},"modules/PaymentModule.html":{}}}],["typeormmodule.forfeature([restaurent",{"_index":502,"title":{},"body":{"modules/RestaurentModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":623,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forroot",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":544,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"injectables/ValidationPipe.html":{}}}],["types.includes(metatype",{"_index":691,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["typescript",{"_index":577,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{},"index.html":{}}}],["ui",{"_index":755,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":435,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/UserService.html":{}}}],["unauthorizedexception('incorrect",{"_index":659,"title":{},"body":{"injectables/UserService.html":{}}}],["unauthorizedexception('user",{"_index":436,"title":{},"body":{"injectables/PaymentService.html":{}}}],["unauthorizedexception('your",{"_index":665,"title":{},"body":{"injectables/UserService.html":{}}}],["undefined",{"_index":147,"title":{},"body":{"entities/Cart.html":{},"classes/Maintenance.html":{},"injectables/ValidationPipe.html":{}}}],["unique",{"_index":464,"title":{},"body":{"entities/Restaurent.html":{},"entities/User.html":{}}}],["unit",{"_index":796,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":175,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"classes/JwtServiceClass.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/RestaurentController.html":{},"injectables/RestaurentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["update",{"_index":437,"title":{},"body":{"injectables/PaymentService.html":{}}}],["updatedat",{"_index":386,"title":{},"body":{"classes/Maintenance.html":{}}}],["updateddate",{"_index":387,"title":{},"body":{"classes/Maintenance.html":{}}}],["updatedtime",{"_index":395,"title":{},"body":{"classes/Maintenance.html":{}}}],["use",{"_index":349,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["use(request",{"_index":350,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["used",{"_index":171,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/PaymentService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":8,"title":{"entities/User.html":{}},"body":{"entities/Address.html":{},"entities/Cart.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/JwtServiceClass.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.addaddressdata(address",{"_index":666,"title":{},"body":{"injectables/UserService.html":{}}}],["user.address",{"_index":37,"title":{},"body":{"entities/Address.html":{}}}],["user.cart",{"_index":152,"title":{},"body":{"entities/Cart.html":{}}}],["user.controller",{"_index":621,"title":{},"body":{"modules/UserModule.html":{}}}],["user.createdat",{"_index":649,"title":{},"body":{"injectables/UserService.html":{}}}],["user.entity",{"_index":43,"title":{},"body":{"entities/Address.html":{},"entities/Cart.html":{}}}],["user.service",{"_index":609,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.service",{"_index":204,"title":{},"body":{"modules/CartModule.html":{},"injectables/CartService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{}}}],["useragent",{"_index":359,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["useragent}${ip",{"_index":367,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["usercontroller",{"_index":593,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdata",{"_index":651,"title":{},"body":{"injectables/UserService.html":{}}}],["useremail",{"_index":224,"title":{},"body":{"injectables/CartService.html":{}}}],["userid=${getuser.id",{"_index":266,"title":{},"body":{"injectables/CartService.html":{},"injectables/PaymentService.html":{}}}],["usermodule",{"_index":76,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"classes/TypeOrmInterface.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":636,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":198,"title":{"injectables/UserService.html":{}},"body":{"modules/CartModule.html":{},"injectables/CartService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["validate",{"_index":671,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(object",{"_index":687,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validationpipe",{"_index":669,"title":{"injectables/ValidationPipe.html":{}},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validator",{"_index":46,"title":{},"body":{"entities/Address.html":{},"entities/Cart.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Menu.html":{},"entities/Restaurent.html":{},"entities/User.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["value",{"_index":245,"title":{},"body":{"injectables/CartService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":579,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["variable",{"_index":703,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":832,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":336,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["verifyjwttoken",{"_index":312,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["verifyjwttoken(token",{"_index":334,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["version",{"_index":548,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["void",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{}}}],["watch",{"_index":791,"title":{},"body":{"index.html":{}}}],["website",{"_index":821,"title":{},"body":{"index.html":{}}}],["without",{"_index":643,"title":{},"body":{"injectables/UserService.html":{}}}],["world",{"_index":127,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":811,"title":{},"body":{"index.html":{}}}],["your_cart_items",{"_index":440,"title":{},"body":{"injectables/PaymentService.html":{}}}],["zoom",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/CartModule.html":{},"modules/PaymentModule.html":{},"modules/RestaurentModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"entities/Address.html":{"url":"entities/Address.html","title":"entity - Address","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Address\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Entities/address.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a address entity user have multiple address so all address are avalibale here\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                city\n                            \n                            \n                                cuntry\n                            \n                            \n                                doorNo\n                            \n                            \n                                id\n                            \n                            \n                                pincode\n                            \n                            \n                                state\n                            \n                            \n                                streetName\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/address.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cuntry\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/address.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        doorNo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/address.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/address.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pincode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/address.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/address.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        streetName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/address.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.address)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/address.entity.ts:44\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { User } from './user.entity';\nimport { IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n/**\n * This is a address entity user have multiple address so all address are avalibale here\n */\n@Entity()\nexport class Address {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  @IsString()\n  @ApiProperty()\n  doorNo: string;\n\n  @Column()\n  @IsString()\n  @ApiProperty()\n  streetName: string;\n\n  @Column()\n  @IsString()\n  @ApiProperty()\n  city: string;\n\n  @Column()\n  @IsString()\n  @ApiProperty()\n  state: string;\n\n  @Column()\n  @IsString()\n  @ApiProperty()\n  cuntry: string;\n\n  @Column()\n  @IsString()\n  @ApiProperty()\n  pincode: string;\n\n  @ManyToOne(() => User, (user) => user.address)\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This is dummy method\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n/**\n * This is dummy method\n */\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  // @Get()\n  // getHello(): string {\n  //   return this.appService.getHello();\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nCartModule\n\nCartModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCartModule->AppModule\n\n\n\n\n\nPaymentModule\n\nPaymentModule\n\nAppModule -->\n\nPaymentModule->AppModule\n\n\n\n\n\nRestaurentModule\n\nRestaurentModule\n\nAppModule -->\n\nRestaurentModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CartModule\n                        \n                        \n                            PaymentModule\n                        \n                        \n                            RestaurentModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TypeOrmConfig } from './Common/TypeOrm/typeorm.config';\nimport { UserModule } from './Modules/user/user.module';\nimport { RestaurentModule } from './Modules/restaurent/restaurent.module';\nimport { CartModule } from './Modules/cart/cart.module';\nimport { LoggerMiddleware } from './Common/MiddleWare/logger.middleware';\nimport { PaymentModule } from './Modules/payment/payment.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'mysql',\n      host: TypeOrmConfig.host,\n      port: TypeOrmConfig.port,\n      username: TypeOrmConfig.username,\n      password: TypeOrmConfig.password,\n      database: TypeOrmConfig.database,\n      autoLoadEntities: true,\n      synchronize: true\n    }),\n    UserModule,\n    RestaurentModule,\n    CartModule,\n    PaymentModule\n  ],\n  controllers: [AppController],\n  providers: [AppService]\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LoggerMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This is dummy method\n\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * This is dummy method\n */\n@Injectable()\nexport class AppService {\n  // getHello(): string {\n  //   return 'Hello World!';\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Cart.html":{"url":"entities/Cart.html","title":"entity - Cart","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Cart\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Entities/cart.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is cart entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                foodItemName\n                            \n                            \n                                foodItemPrice\n                            \n                            \n                                id\n                            \n                            \n                                isActive\n                            \n                            \n                                menu\n                            \n                            \n                                orderDate\n                            \n                            \n                                quantity\n                            \n                            \n                                restaurentName\n                            \n                            \n                                totalPrice\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        foodItemName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/cart.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        foodItemPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/cart.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/cart.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/cart.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        menu\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Menu\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, menu => menu.cart)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/cart.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        orderDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/cart.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/cart.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        restaurentName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/cart.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/cart.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.cart)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/cart.entity.ts:40\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsInt, IsString } from 'class-validator';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { User } from './user.entity';\nimport { Menu } from './menu.entity';\n\n/**\n * This is cart entity\n */\n@Entity()\nexport class Cart {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  foodItemPrice: number;\n\n  @Column()\n  @ApiProperty()\n  foodItemName: string;\n\n  @Column()\n  @ApiProperty()\n  restaurentName: string;\n\n  @Column()\n  @ApiProperty()\n  quantity: number;\n\n  @Column()\n  totalPrice: number;\n\n  @Column({ default: true })\n  isActive: boolean;\n\n  @Column({ default: new Date().toLocaleString() })\n  orderDate: string;\n\n  @ManyToOne(() => User, (user) => user.cart)\n  user: User;\n\n  @ManyToOne(() => Menu, (menu) => menu.cart)\n  menu: Menu;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CartController.html":{"url":"controllers/CartController.html","title":"controller - CartController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CartController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/cart/cart.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                cart\n            \n\n\n            \n                Description\n            \n            \n                This is cart controller all Apis are avaliable here\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addItemsIntoCart\n                            \n                            \n                                    Async\n                                getCartItems\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addItemsIntoCart\n                        \n                    \n                \n            \n            \n                \n                    \n                    addItemsIntoCart(data: Cart, email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('addItemsIntoCart/:email')\n                \n            \n\n            \n                \n                    Defined in src/Modules/cart/cart.controller.ts:21\n                \n            \n\n\n            \n                \n                    This method is used to add items into cart\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                Cart\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCartItems\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCartItems(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('getCartItems/:email')\n                \n            \n\n            \n                \n                    Defined in src/Modules/cart/cart.controller.ts:31\n                \n            \n\n\n            \n                \n                    This method is used to getcartItems based on email\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post } from '@nestjs/common';\nimport { CartService } from './cart.service';\nimport { Cart } from './../../Entities/cart.entity';\nimport { ApiTags } from '@nestjs/swagger';\n\n/**\n * This is cart controller all Apis are avaliable here\n */\n@ApiTags('Cart info')\n@Controller('cart')\nexport class CartController {\n  constructor(private readonly cartService: CartService) {}\n\n  /**\n   * This method is used to add items into cart\n   * @param data\n   * @param email\n   * @returns\n   */\n  @Post('addItemsIntoCart/:email')\n  async addItemsIntoCart(@Body() data: Cart, @Param('email') email: string) {\n    return await this.cartService.addItemsIntoCart(data, email);\n  }\n\n  /**\n   * This method is used to getcartItems based on email\n   * @param email\n   * @returns\n   */\n  @Get('getCartItems/:email')\n  async getCartItems(@Param('email') email: string) {\n    return await this.cartService.getCartItems(email);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CartModule.html":{"url":"modules/CartModule.html","title":"module - CartModule","body":"\n                   \n\n\n\n\n    Modules\n    CartModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CartModule\n\n\n\ncluster_CartModule_providers\n\n\n\n\nCartService\n\nCartService\n\n\n\nCartModule\n\nCartModule\n\nCartModule -->\n\nCartService->CartModule\n\n\n\n\n\nRestaurentService\n\nRestaurentService\n\nCartModule -->\n\nRestaurentService->CartModule\n\n\n\n\n\nUserService\n\nUserService\n\nCartModule -->\n\nUserService->CartModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/Modules/cart/cart.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This is cart module cart related configurations are avaliable here\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CartService\n                        \n                        \n                            RestaurentService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CartController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CartController } from './cart.controller';\nimport { CartService } from './cart.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Cart } from './../../Entities/cart.entity';\nimport { RestaurentService } from '../restaurent/restaurent.service';\nimport { UserService } from '../user/user.service';\nimport { Restaurent } from './../../Entities/restaurent.entity';\nimport { Menu } from './../../Entities/menu.entity';\nimport { User } from './../../Entities/user.entity';\nimport { JwtServiceClass } from './../../Common/Providers/jwt.service';\nimport { Address } from './../../Entities/address.entity';\n\n/**\n * This is cart module cart related configurations are avaliable here\n */\n@Module({\n  imports: [TypeOrmModule.forFeature([Cart, Restaurent, Menu, User, Address])],\n\n  controllers: [CartController],\n  providers: [CartService, RestaurentService, UserService, JwtServiceClass]\n})\nexport class CartModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CartService.html":{"url":"injectables/CartService.html","title":"injectable - CartService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CartService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/cart/cart.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This is cart service method\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addItemsIntoCart\n                            \n                            \n                                    Async\n                                getCartItems\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cartRepository: Repository, restaurentService: RestaurentService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/Modules/cart/cart.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cartRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        restaurentService\n                                                  \n                                                        \n                                                                        RestaurentService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addItemsIntoCart\n                        \n                    \n                \n            \n            \n                \n                    \n                    addItemsIntoCart(data: Cart, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/cart/cart.service.ts:29\n                \n            \n\n\n            \n                \n                    This method is used to add food items into cart\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                Cart\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCartItems\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCartItems(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/cart/cart.service.ts:63\n                \n            \n\n\n            \n                \n                    This method is used to get cart items based on useremail\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { getManager, Repository } from 'typeorm';\nimport { Cart } from './../../Entities/cart.entity';\nimport { RestaurentService } from './../restaurent/restaurent.service';\nimport { Menu } from './../../Entities/menu.entity';\nimport { UserService } from './../user/user.service';\nimport { User } from './../../Entities/user.entity';\n/**\n * This is cart service method\n */\n@Injectable()\nexport class CartService {\n  constructor(\n    @InjectRepository(Cart) private readonly cartRepository: Repository,\n    private readonly restaurentService: RestaurentService,\n    private readonly userService: UserService\n  ) {}\n  /**\n   * This method is used to add food items into cart\n   * @param data\n   * @param email\n   * @returns\n   */\n  async addItemsIntoCart(data: Cart, email: string): Promise {\n    const getRestaurent = await this.restaurentService.findRestaurest(\n      data.restaurentName\n    );\n    const getItem = await this.restaurentService.findItem(\n      data.foodItemName,\n      data.restaurentName\n    );\n    const getUser = await this.userService.findUser(email);\n    let cart = new Cart();\n    let menu = new Menu();\n    let user = new User();\n    if (!getRestaurent || !getItem || !getUser) {\n      throw new NotFoundException('Incorrect data');\n    } else {\n      if (cart.quantity == 0) {\n        throw new BadRequestException('min value of the quentity is 1');\n      }\n      cart = data;\n      const itemprice = (cart.foodItemPrice = getItem.foodItemPrice);\n      cart.totalPrice = cart.quantity * itemprice;\n      menu = getItem;\n      user = getUser;\n      cart.menu = menu;\n      cart.user = user;\n      return await this.cartRepository.save(cart);\n    }\n  }\n\n  /**\n   * This method is used to get cart items based on useremail\n   * @param email\n   * @returns\n   */\n  async getCartItems(email: string) {\n    const getUser = await this.userService.findUser(email);\n    const getCart = await this.cartRepository.find({\n      user: getUser,\n      isActive: true\n    });\n    if (!getUser) {\n      throw new NotFoundException('user not found');\n    } else if (getCart.length == 0) {\n      throw new NotFoundException('Your cart is empty');\n    }\n    const price = await getManager().query(\n      `select sum(totalPrice) \"totalPrice\" from cart where userId=${getUser.id}`\n    );\n    const result = price[0];\n    const displsy = {\n      all_Items_In_Your_Cart: getCart,\n      Total_price_in_your_Cart_Items: result.totalPrice\n    };\n    return displsy;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/Filters/exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                This class is used to find the exceptions for entire project\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/Filters/exception.filter.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n/**\n * This class is used to find the exceptions for entire project\n */\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      message: exception.message\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtServiceClass.html":{"url":"classes/JwtServiceClass.html","title":"class - JwtServiceClass","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtServiceClass\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/Providers/jwt.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This is jwt service method this is the place to generate all jwt tokens\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createJwtToken\n                            \n                            \n                                    Async\n                                deleteToken\n                            \n                            \n                                    Async\n                                verifyJwtToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/Common/Providers/jwt.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createJwtToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createJwtToken(data: User)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/Providers/jwt.service.ts:17\n                \n            \n\n\n            \n                \n                    Create jwt token method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is taken from the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        the token\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteToken(response: Response)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/Providers/jwt.service.ts:44\n                \n            \n\n\n            \n                \n                    delete jwt token method\nis clear show success meimport { User } from 'src/Entities/user.entity';\nssageimport { JwtService } from '@nestjs/jwt';\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is imported from the express library\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        if cookie import { User } from './../../Entities/user.entity';\nis clear show success meimport { User } from 'src/Entities/user.entity';\nssageimport { JwtService } from '@nestjs/jwt';\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyJwtToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyJwtToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/Providers/jwt.service.ts:27\n                \n            \n\n\n            \n                \n                    verify jwt token method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is recived from the method\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the verify token\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { JwtService } from '@nestjs/jwt';\nimport { Response } from 'express';\nimport { User } from './../../Entities/user.entity';\n\n/**\n * This is jwt service method this is the place to generate all jwt tokens\n */\nexport class JwtServiceClass {\n  constructor(private readonly jwtService: JwtService) {}\n\n  /**\n   * Create jwt token method\n   * @param response is imported from the express library\n   * @param data is taken from the user\n   * @returns the token\n   */\n  async createJwtToken(data: User) {\n    const jwt = this.jwtService.signAsync({ id: data.id });\n    return jwt;\n  }\n\n  /**\n   * verify jwt token method\n   * @param token is recived from the method\n   * @returns the verify token\n   */\n  async verifyJwtToken(token: string): Promise {\n    try {\n      const verify = await this.jwtService.verifyAsync(token);\n      return verify;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * delete jwt token method\n   * @param response is imported from the express library\n   * @returns if cookie import { User } from './../../Entities/user.entity';\nis clear show success meimport { User } from 'src/Entities/user.entity';\nssageimport { JwtService } from '@nestjs/jwt';\n\n   */\n  async deleteToken(response: Response) {\n    response.clearCookie('jwt');\n    return {\n      message: 'you are successfully logout'\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/MiddleWare/logger.middleware.ts\n        \n\n\n            \n                Description\n            \n            \n                This method is used to return the logger related info based on middleware\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: Request, response: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/MiddleWare/logger.middleware.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(LoggerMiddleware.name)\n                    \n                \n                    \n                        \n                                Defined in src/Common/MiddleWare/logger.middleware.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from '@nestjs/common';\nimport { NextFunction, Request, Response } from 'express';\n/**\n * This method is used to return the logger related info based on middleware\n */\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  private logger = new Logger(LoggerMiddleware.name);\n\n  use(request: Request, response: Response, next: NextFunction): void {\n    const { ip, method, originalUrl } = request;\n\n    const userAgent = request.get('user-agent') || '';\n    response.on('finish', () => {\n      const { statusCode } = response;\n      const contentLength = response.get('content-length');\n      this.logger.log(\n        `${method} ${originalUrl} ${statusCode} ${contentLength}-${userAgent}${ip}`\n      );\n      this.logger.log(\n        'info',\n        `${method} ${originalUrl} ${statusCode} ${contentLength}-${userAgent}${ip}`\n      );\n    });\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/user/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This is data transfer object Required property are maintain here\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/login.dto.ts:13\n                        \n                    \n\n            \n                \n                    email property\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/login.dto.ts:20\n                        \n                    \n\n            \n                \n                    password property\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsString } from 'class-validator';\n\n/**\n * This is data transfer object Required property are maintain here\n */\nexport class LoginDto {\n  /**\n   * email property\n   */\n  @IsEmail()\n  @ApiProperty()\n  email: string;\n\n  /**\n   * password property\n   */\n  @IsString()\n  @ApiProperty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Maintenance.html":{"url":"classes/Maintenance.html","title":"class - Maintenance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Maintenance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Entities/maintenance.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a maintenance entity all maintanance related columns are avaliable here\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                createDate\n                            \n                            \n                                isActive\n                            \n                            \n                                updatedAt\n                            \n                            \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/maintenance.entity.ts:23\n                        \n                    \n\n            \n                \n                    generates createdAt column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/maintenance.entity.ts:33\n                        \n                    \n\n            \n                \n                    generates createTime column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/maintenance.entity.ts:13\n                        \n                    \n\n            \n                \n                    generates isActive column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ' '})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/maintenance.entity.ts:18\n                        \n                    \n\n            \n                \n                    generates updatedAt column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ' '})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/maintenance.entity.ts:28\n                        \n                    \n\n            \n                \n                    generates updatedTime column\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString } from 'class-validator';\nimport { Column } from 'typeorm';\n\n/**\n * This is a maintenance entity all maintanance related columns are avaliable here\n */\nexport class Maintenance {\n  /**\n   * generates isActive column\n   */\n  @Column({ default: true })\n  isActive: boolean;\n  /**\n   *generates updatedAt column\n   */\n  @Column({ default: ' ' })\n  updatedAt: string;\n  /**\n   *generates createdAt column\n   */\n  @Column()\n  createdAt: string;\n  /**\n   *generates updatedTime column\n   */\n  @Column({ default: ' ' })\n  updatedDate: string;\n  /**\n   * generates createTime column\n   */\n  @Column({ default: new Date().toLocaleString() })\n  createDate: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Menu.html":{"url":"entities/Menu.html","title":"entity - Menu","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Menu\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Entities/menu.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is menu entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cart\n                            \n                            \n                                category\n                            \n                            \n                                foodItemName\n                            \n                            \n                                foodItemPrice\n                            \n                            \n                                id\n                            \n                            \n                                restaurent\n                            \n                            \n                                restaurentName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        cart\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Cart[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, cart => cart.menu)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/menu.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/menu.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        foodItemName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/menu.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        foodItemPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsInt()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/menu.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/menu.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        restaurent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Restaurent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, restaurent => restaurent.menu)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/menu.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        restaurentName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/menu.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsInt, IsString } from 'class-validator';\nimport {\n  Column,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn\n} from 'typeorm';\nimport { Restaurent } from './restaurent.entity';\nimport { Cart } from './cart.entity';\n\n/**\n * This is menu entity\n */\n@Entity()\nexport class Menu {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  @IsString()\n  @ApiProperty()\n  restaurentName: string;\n\n  @Column()\n  @IsString()\n  @ApiProperty()\n  foodItemName: string;\n\n  @Column()\n  @IsInt()\n  @ApiProperty()\n  foodItemPrice: number;\n\n  @Column()\n  @IsString()\n  @ApiProperty()\n  category: string;\n\n  @ManyToOne(() => Restaurent, (restaurent) => restaurent.menu)\n  restaurent: Restaurent;\n\n  @OneToMany(() => Cart, (cart) => cart.menu)\n  cart: Cart[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PaymentController.html":{"url":"controllers/PaymentController.html","title":"controller - PaymentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PaymentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/payment/payment.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                payment\n            \n\n\n            \n                Description\n            \n            \n                This is a payment controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addPayment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addPayment\n                        \n                    \n                \n            \n            \n                \n                    \n                    addPayment(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('Payment/:email')\n                \n            \n\n            \n                \n                    Defined in src/Modules/payment/payment.controller.ts:19\n                \n            \n\n\n            \n                \n                    This is addPayment method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Param, Post } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { PaymentService } from './payment.service';\n\n/**\n * This is a payment controller\n */\n@ApiTags('payment')\n@Controller('payment')\nexport class PaymentController {\n  constructor(private readonly paymentService: PaymentService) {}\n\n  /**\n   * This is addPayment method\n   * @param email\n   * @returns\n   */\n  @Post('Payment/:email')\n  async addPayment(@Param('email') email: string) {\n    return await this.paymentService.makePayment(email);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaymentModule.html":{"url":"modules/PaymentModule.html","title":"module - PaymentModule","body":"\n                   \n\n\n\n\n    Modules\n    PaymentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PaymentModule\n\n\n\ncluster_PaymentModule_providers\n\n\n\n\nPaymentService\n\nPaymentService\n\n\n\nPaymentModule\n\nPaymentModule\n\nPaymentModule -->\n\nPaymentService->PaymentModule\n\n\n\n\n\nUserService\n\nUserService\n\nPaymentModule -->\n\nUserService->PaymentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/Modules/payment/payment.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            all configurations of the payment related is avaliable here\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaymentService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PaymentController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaymentController } from './payment.controller';\nimport { PaymentService } from './payment.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Cart } from './../../Entities/cart.entity';\nimport { UserService } from './../user/user.service';\nimport { User } from './../../Entities/user.entity';\nimport { Address } from './../../Entities/address.entity';\nimport { JwtServiceClass } from './../../Common/Providers/jwt.service';\n\n/**\n * all configurations of the payment related is avaliable here\n */\n@Module({\n  imports: [TypeOrmModule.forFeature([Cart, User, Address])],\n\n  controllers: [PaymentController],\n  providers: [PaymentService, UserService, JwtServiceClass]\n})\nexport class PaymentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaymentService.html":{"url":"injectables/PaymentService.html","title":"injectable - PaymentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaymentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/payment/payment.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This is payment service all payment related logics are avaliable\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                makePayment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cartRepository: Repository, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/Modules/payment/payment.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cartRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        makePayment\n                        \n                    \n                \n            \n            \n                \n                    \n                    makePayment(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/payment/payment.service.ts:21\n                \n            \n\n\n            \n                \n                    This Method is used to Make payment\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { getManager, Repository } from 'typeorm';\nimport { UserService } from '../user/user.service';\nimport { Cart } from './../../Entities/cart.entity';\n/**\n * This is payment service all payment related logics are avaliable\n */\n@Injectable()\nexport class PaymentService {\n  constructor(\n    @InjectRepository(Cart) private readonly cartRepository: Repository,\n    private readonly userService: UserService\n  ) {}\n\n  /**\n   * This Method is used to Make payment\n   * @param email\n   * @returns\n   */\n  async makePayment(email: string) {\n    const getUser = await this.userService.findUser(email);\n    if (!getUser) {\n      throw new UnauthorizedException('user not found');\n    }\n    const getCart = await this.cartRepository.find({ user: getUser });\n    await getManager().query(\n      `update cart set isActive=replace(isActive,true,false) where userId=${getUser.id};`\n    );\n    const result = {\n      your_cart_items: getCart,\n      payment_status: 'amount succsfully paid'\n    };\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Restaurent.html":{"url":"entities/Restaurent.html","title":"entity - Restaurent","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Restaurent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Entities/restaurent.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a Restaurent entity so related info is avalibale here\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                location\n                            \n                            \n                                menu\n                            \n                            \n                                phoneNumber\n                            \n                            \n                                rating\n                            \n                            \n                                RestaurentEmail\n                            \n                            \n                                RestaurentName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/restaurent.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/restaurent.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/restaurent.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        menu\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Menu[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, menu => menu.restaurent)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/restaurent.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/restaurent.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/restaurent.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RestaurentEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})@IsEmail()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/restaurent.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RestaurentName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/restaurent.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsString } from 'class-validator';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { Maintenance } from './maintenance.entity';\nimport { Menu } from './menu.entity';\n\n/**\n * This is a Restaurent entity so related info is avalibale here\n */\n@Entity()\nexport class Restaurent extends Maintenance {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  @IsString()\n  @ApiProperty()\n  RestaurentName: string;\n\n  @Column({ unique: true })\n  @IsEmail()\n  @ApiProperty()\n  RestaurentEmail: string;\n\n  @Column({ unique: true })\n  @IsString()\n  @ApiProperty()\n  phoneNumber: string;\n\n  @Column()\n  @IsString()\n  @ApiProperty()\n  location: string;\n\n  @Column()\n  @IsString()\n  @ApiProperty()\n  rating: string;\n\n  @Column()\n  @IsString()\n  @ApiProperty()\n  description: string;\n\n  @OneToMany(() => Menu, (menu) => menu.restaurent)\n  menu: Menu[];\n\n  async addMenuData(menu: Menu) {\n    if (this.menu == null) {\n      this.menu = new Array();\n    }\n    this.menu.push(menu);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RestaurentController.html":{"url":"controllers/RestaurentController.html","title":"controller - RestaurentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RestaurentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/restaurent/restaurent.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                restaurent\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addFood\n                            \n                            \n                                    Async\n                                addRestaurest\n                            \n                            \n                                    Async\n                                getFoods\n                            \n                            \n                                    Async\n                                getRestarentNames\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addFood\n                        \n                    \n                \n            \n            \n                \n                    \n                    addFood(data: Menu)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('AddFood')\n                \n            \n\n            \n                \n                    Defined in src/Modules/restaurent/restaurent.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                Menu\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addRestaurest\n                        \n                    \n                \n            \n            \n                \n                    \n                    addRestaurest(data: Restaurent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('addRestaurest')\n                \n            \n\n            \n                \n                    Defined in src/Modules/restaurent/restaurent.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                Restaurent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFoods\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFoods(restaurentName: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('getFoodBasedOnRestaurent/:restaurentName')\n                \n            \n\n            \n                \n                    Defined in src/Modules/restaurent/restaurent.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    restaurentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getRestarentNames\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRestarentNames()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('getRestaurent')\n                \n            \n\n            \n                \n                    Defined in src/Modules/restaurent/restaurent.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Restaurent } from 'src/Entities/restaurent.entity';\nimport { RestaurentService } from './restaurent.service';\nimport { Menu } from './../../Entities/menu.entity';\n\n@ApiTags('Restaurent Info')\n@Controller('restaurent')\nexport class RestaurentController {\n  constructor(private readonly restaurentService: RestaurentService) {}\n\n  @Post('addRestaurest')\n  async addRestaurest(@Body() data: Restaurent) {\n    return await this.restaurentService.addRestaurest(data);\n  }\n\n  @Post('AddFood')\n  async addFood(@Body() data: Menu) {\n    return await this.restaurentService.addMenu(data);\n  }\n\n  @Get('getRestaurent')\n  async getRestarentNames() {\n    return await this.restaurentService.getRestarentNames();\n  }\n\n  @Get('getFoodBasedOnRestaurent/:restaurentName')\n  async getFoods(@Param('restaurentName') restaurentName: string) {\n    return this.restaurentService.getFoods(restaurentName);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RestaurentModule.html":{"url":"modules/RestaurentModule.html","title":"module - RestaurentModule","body":"\n                   \n\n\n\n\n    Modules\n    RestaurentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RestaurentModule\n\n\n\ncluster_RestaurentModule_providers\n\n\n\n\nRestaurentService\n\nRestaurentService\n\n\n\nRestaurentModule\n\nRestaurentModule\n\nRestaurentModule -->\n\nRestaurentService->RestaurentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/Modules/restaurent/restaurent.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RestaurentService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RestaurentController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RestaurentController } from './restaurent.controller';\nimport { RestaurentService } from './restaurent.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Restaurent } from './../../Entities/restaurent.entity';\nimport { Menu } from './../../Entities/menu.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Restaurent, Menu])],\n\n  controllers: [RestaurentController],\n  providers: [RestaurentService]\n})\nexport class RestaurentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RestaurentService.html":{"url":"injectables/RestaurentService.html","title":"injectable - RestaurentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RestaurentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/restaurent/restaurent.service.ts\n        \n\n\n            \n                Description\n            \n            \n                All Restaurent Related business logics are avaliable here\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMenu\n                            \n                            \n                                    Async\n                                addRestaurest\n                            \n                            \n                                    Async\n                                findItem\n                            \n                            \n                                    Async\n                                findRestaurest\n                            \n                            \n                                    Async\n                                getFoods\n                            \n                            \n                                    Async\n                                getRestarentNames\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(restaurentRepository: Repository, menuRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/Modules/restaurent/restaurent.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        restaurentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        menuRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addMenu\n                        \n                    \n                \n            \n            \n                \n                    \n                    addMenu(data: Menu)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/restaurent/restaurent.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                Menu\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addRestaurest\n                        \n                    \n                \n            \n            \n                \n                    \n                    addRestaurest(data: Restaurent)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/restaurent/restaurent.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                Restaurent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findItem\n                        \n                    \n                \n            \n            \n                \n                    \n                    findItem(Item: string, restaurentName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/restaurent/restaurent.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    Item\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    restaurentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findRestaurest\n                        \n                    \n                \n            \n            \n                \n                    \n                    findRestaurest(restaurentName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/restaurent/restaurent.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    restaurentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFoods\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFoods(restaurentName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/restaurent/restaurent.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    restaurentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getRestarentNames\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRestarentNames()\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/restaurent/restaurent.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Restaurent } from './../../Entities/restaurent.entity';\nimport { Menu } from './../../Entities/menu.entity';\n/**\n * All Restaurent Related business logics are avaliable here\n */\n@Injectable()\nexport class RestaurentService {\n  constructor(\n    @InjectRepository(Restaurent)\n    private readonly restaurentRepository: Repository,\n    @InjectRepository(Menu)\n    private readonly menuRepository: Repository\n  ) {}\n\n  async addRestaurest(data: Restaurent) {\n    const restaurent = new Restaurent();\n    restaurent.createdAt = data.RestaurentName;\n    const newdata = Object.assign(restaurent, data);\n    return await this.restaurentRepository.save(newdata);\n  }\n\n  async addMenu(data: Menu) {\n    const getRestaurent = await this.findRestaurest(data.restaurentName);\n    let restaurent = new Restaurent();\n    let menu = new Menu();\n    if (!getRestaurent) {\n      throw new NotFoundException('Restaurent is not in the register list');\n    } else {\n      restaurent = getRestaurent;\n      menu = data;\n      //restaurent.addMenuData(menu);\n      menu.restaurent = restaurent;\n      return await this.menuRepository.save(menu);\n    }\n  }\n\n  async getRestarentNames() {\n    return await this.restaurentRepository.find();\n  }\n\n  async getFoods(restaurentName: string) {\n    const getRestaurent = await this.restaurentRepository.findOne({\n      RestaurentName: restaurentName\n    });\n    if (!getRestaurent) {\n      throw new NotFoundException('Restaurent is not register');\n    }\n    return await this.menuRepository.find({\n      restaurentName: getRestaurent.RestaurentName\n    });\n  }\n\n  async findRestaurest(restaurentName: string) {\n    const getRestaurent = await this.restaurentRepository.findOne({\n      RestaurentName: restaurentName\n    });\n    return getRestaurent;\n  }\n\n  async findItem(Item: string, restaurentName: string) {\n    const getItem = await this.menuRepository.findOne({\n      foodItemName: Item,\n      restaurentName: restaurentName\n    });\n    return getItem;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SwaggerConfig.html":{"url":"interfaces/SwaggerConfig.html","title":"interface - SwaggerConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SwaggerConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Config/Swagger/swagger.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                swagger related types is declared here\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            Description\n                                        \n                                \n                                \n                                        \n                                            Tags\n                                        \n                                \n                                \n                                        \n                                            Title\n                                        \n                                \n                                \n                                        \n                                            Version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        Description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SwaggerConfig {\n  Title: string;\n  Description: string;\n  Version: string;\n  Tags: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TypeOrmInterface.html":{"url":"classes/TypeOrmInterface.html","title":"class - TypeOrmInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TypeOrmInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/TypeOrm/typeorm.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                TypeOrm data types Declared here\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                database\n                            \n                            \n                                host\n                            \n                            \n                                password\n                            \n                            \n                                port\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        database\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/Common/TypeOrm/typeorm.interface.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        host\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/Common/TypeOrm/typeorm.interface.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/Common/TypeOrm/typeorm.interface.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        port\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/Common/TypeOrm/typeorm.interface.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/Common/TypeOrm/typeorm.interface.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TypeOrmInterface {\n  host: string;\n  port: number;\n  username: string;\n  password: string;\n  database: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a user entity all user related columns are avaliable here\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                age\n                            \n                            \n                                cart\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Address[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, address => address.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/user.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/user.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cart\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Cart[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, cart => cart.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/user.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})@ApiProperty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/user.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})@ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsInt, IsString } from 'class-validator';\nimport {\n  BeforeInsert,\n  Column,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn\n} from 'typeorm';\nimport { Maintenance } from './maintenance.entity';\nimport { Address } from './address.entity';\nimport { Cart } from './cart.entity';\n/**This is used to maintain password strong */\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst bcrypt = require('bcryptjs');\n/**\n * This is a user entity all user related columns are avaliable here\n */\n@Entity()\nexport class User extends Maintenance {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  @ApiProperty()\n  @IsString()\n  name: string;\n\n  @Column({ unique: true })\n  @ApiProperty()\n  @IsEmail()\n  email: string;\n\n  @Column({ unique: true })\n  @ApiProperty()\n  @IsString()\n  phoneNumber: string;\n\n  @Column()\n  @ApiProperty()\n  @IsInt()\n  age: number;\n\n  @Column()\n  @ApiProperty()\n  @IsString()\n  password: string;\n\n  @BeforeInsert()\n  async strongPassword() {\n    this.password = await bcrypt.hash(this.password, 10);\n  }\n\n  @OneToMany(() => Address, (address) => address.user)\n  address: Address[];\n\n  async addAddressData(address: Address) {\n    if (this.address == null) {\n      this.address = new Array();\n    }\n    this.address.push(address);\n  }\n\n  @OneToMany(() => Cart, (cart) => cart.user)\n  cart: Cart[];\n\n  async addCartData(cart: Cart) {\n    if (this.cart == null) {\n      this.cart = new Array();\n    }\n    this.cart.push(cart);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addAddress\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                loginUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addAddress\n                        \n                    \n                \n            \n            \n                \n                    \n                    addAddress(data: Address, email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('address/:email')\n                \n            \n\n            \n                \n                    Defined in src/Modules/user/user.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                Address\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(data: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/Modules/user/user.controller.ts:18\n                \n            \n\n\n            \n                \n                    This method is used to register the user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is taken from the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        save the data in register entity\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        loginUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginUser(data: LoginDto, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n            \n                \n                    Defined in src/Modules/user/user.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Param, Post, Res } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { User } from './../../Entities/user.entity';\nimport { LoginDto } from './dto/login.dto';\nimport { Response } from 'express';\nimport { Address } from './../../Entities/address.entity';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  /**\n   * This method is used to register the user\n   * @param data is taken from the user\n   * @returns save the data in register entity\n   */\n  @Post('register')\n  async createUser(@Body() data: User) {\n    return await this.userService.registerUser(data);\n  }\n\n  @Post('login')\n  async loginUser(\n    @Body() data: LoginDto,\n    @Res({ passthrough: true }) response: Response\n  ) {\n    return await this.userService.loginUser(data, response);\n  }\n\n  @Post('address/:email')\n  async addAddress(@Body() data: Address, @Param('email') email: string) {\n    return await this.userService.addAddress(data, email);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService\n\nUserService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/Modules/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './../../Entities/user.entity';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtServiceClass } from './../../Common/Providers/jwt.service';\nimport { Address } from './../../Entities/address.entity';\nimport { Cart } from './../../Entities/cart.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User, Address, Cart]),\n    JwtModule.register({\n      secret: 'secrect',\n      signOptions: { expiresIn: '3h' }\n    })\n  ],\n\n  controllers: [UserController],\n  providers: [UserService, JwtServiceClass]\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addAddress\n                            \n                            \n                                    Async\n                                findUser\n                            \n                            \n                                    Async\n                                loginUser\n                            \n                            \n                                    Async\n                                registerUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, addressRepository: Repository, jwtserviceClass: JwtServiceClass)\n                    \n                \n                        \n                            \n                                Defined in src/Modules/user/user.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        addressRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtserviceClass\n                                                  \n                                                        \n                                                                        JwtServiceClass\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addAddress\n                        \n                    \n                \n            \n            \n                \n                    \n                    addAddress(data: Address, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/user/user.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                Address\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUser(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/user/user.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        loginUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginUser(data: LoginDto, response: Response)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/user/user.service.ts:39\n                \n            \n\n\n            \n                \n                    This method is used to login the user and generate the jwt token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is teken from the user\n\n                                    \n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        user without password\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        registerUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerUser(data: User)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/user/user.service.ts:27\n                \n            \n\n\n            \n                \n                    This method is used to register the user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is taken from the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        save the data in register entity\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from './../../Entities/user.entity';\nimport { LoginDto } from './dto/login.dto';\nimport { JwtServiceClass } from './../../Common/Providers/jwt.service';\nimport { Response } from 'express';\nimport { Address } from './../../Entities/address.entity';\n/**This bcrypt is used to hash the password */\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst bcrypt = require('bcryptjs');\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User) private readonly userRepository: Repository,\n    @InjectRepository(Address)\n    private readonly addressRepository: Repository,\n    private readonly jwtserviceClass: JwtServiceClass\n  ) {}\n\n  /**\n   * This method is used to register the user\n   * @param data is taken from the user\n   * @returns save the data in register entity\n   */\n  async registerUser(data: User) {\n    const user = new User();\n    user.createdAt = data.name;\n    const userData = Object.assign(user, data);\n    return await this.userRepository.save(userData);\n  }\n\n  /**\n   * This method is used to login the user and generate the jwt token\n   * @param data is teken from the user\n   * @returns user without password\n   */\n  async loginUser(data: LoginDto, response: Response) {\n    const getUser = await this.findUser(data.email);\n    const match = await bcrypt.compare(data.password, getUser.password);\n    if (!getUser || match == false) {\n      throw new UnauthorizedException('incorrect credentials');\n    }\n    const jwt = this.jwtserviceClass.createJwtToken(getUser);\n    response.cookie('jwt', jwt, { httpOnly: true });\n    const { password, ...result } = getUser;\n    return result;\n  }\n\n  async addAddress(data: Address, email: string) {\n    const getUser = await this.findUser(email);\n    let address = new Address();\n    let user = new User();\n    if (!getUser) {\n      throw new UnauthorizedException('your not a register user');\n    } else {\n      address = data;\n      user = getUser;\n      //user.addAddressData(address);\n      address.user = user;\n      return await this.addressRepository.save(address);\n    }\n  }\n\n  async findUser(email: string) {\n    const getUser = await this.userRepository.findOne({\n      email: email\n    });\n    return getUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/Pipes/validation.pipes.ts\n        \n\n\n            \n                Description\n            \n            \n                This method is used to validate inputs\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toValidate\n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype: any)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/Pipes/validation.pipes.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, undefined: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/Pipes/validation.pipes.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n  BadRequestException\n} from '@nestjs/common';\nimport { validate } from 'class-validator';\nimport { plainToClass } from 'class-transformer';\n/**\n * This method is used to validate inputs\n */\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, { metatype }: ArgumentMetadata) {\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new BadRequestException('Validation failed');\n    }\n    return value;\n  }\n\n  private toValidate(metatype: any): boolean {\n    const types: any[] = [String, Boolean, Number, Array, Object];\n    return !types.includes(metatype);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/Common/Filters/exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/Common/MiddleWare/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/Common/Pipes/validation.pipes.ts\n            \n            injectable\n            ValidationPipe\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/Common/Providers/jwt.service.ts\n            \n            class\n            JwtServiceClass\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/Common/TypeOrm/typeorm.config.ts\n            \n            variable\n            TypeOrmConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Common/TypeOrm/typeorm.interface.ts\n            \n            class\n            TypeOrmInterface\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/Config/Swagger/swagger.config.ts\n            \n            variable\n            SWAGGER_CONFIG\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Config/Swagger/swagger.interface.ts\n            \n            interface\n            SwaggerConfig\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/Config/Swagger/swagger.ts\n            \n            function\n            createDocument\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Entities/address.entity.ts\n            \n            entity\n            Address\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Entities/cart.entity.ts\n            \n            entity\n            Cart\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Entities/maintenance.entity.ts\n            \n            class\n            Maintenance\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/Entities/menu.entity.ts\n            \n            entity\n            Menu\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Entities/restaurent.entity.ts\n            \n            entity\n            Restaurent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Entities/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Entities/user.entity.ts\n            \n            variable\n            bcrypt\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Modules/cart/cart.controller.ts\n            \n            controller\n            CartController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/Modules/cart/cart.service.ts\n            \n            injectable\n            CartService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/Modules/payment/payment.controller.ts\n            \n            controller\n            PaymentController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/Modules/payment/payment.service.ts\n            \n            injectable\n            PaymentService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/Modules/restaurent/restaurent.controller.ts\n            \n            controller\n            RestaurentController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/Modules/restaurent/restaurent.service.ts\n            \n            injectable\n            RestaurentService\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                src/Modules/user/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/Modules/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/Modules/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                33 %\n                (2/6)\n            \n        \n        \n            \n                \n                src/Modules/user/user.service.ts\n            \n            variable\n            bcrypt\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.0\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cookie-parser : ^1.4.6\n        \n            mysql2 : ^2.3.3\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.3.0\n        \n            typeorm : ^0.2.41\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createDocument   (src/.../swagger.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    This is a mian method program execution is started from here\n\n\n                \n            \n        \n    \n    src/Config/Swagger/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createDocument\n                        \n                    \n                \n            \n            \n                \ncreateDocument(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n                    This function is used to create a swagger\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is imported from the nestjs commom library\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     OpenAPIObject\n\n                    \n                    \n                        create swagger document\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CartModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaymentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RestaurentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_CartModule\n\n\n\ncluster_CartModule_providers\n\n\n\ncluster_PaymentModule\n\n\n\ncluster_PaymentModule_providers\n\n\n\n\nCartModule\n\nCartModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCartModule->AppModule\n\n\n\n\n\nPaymentModule\n\nPaymentModule\n\nAppModule -->\n\nPaymentModule->AppModule\n\n\n\n\n\nRestaurentModule\n\nRestaurentModule\n\nAppModule -->\n\nRestaurentModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nCartService\n\nCartService\n\nCartModule -->\n\nCartService->CartModule\n\n\n\n\n\nRestaurentService\n\nRestaurentService\n\nCartModule -->\n\nRestaurentService->CartModule\n\n\n\nRestaurentModule -->\n\nRestaurentService->RestaurentModule\n\n\n\n\n\nUserService\n\nUserService\n\nCartModule -->\n\nUserService->CartModule\n\n\n\nPaymentModule -->\n\nUserService->PaymentModule\n\n\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nPaymentService\n\nPaymentService\n\nPaymentModule -->\n\nPaymentService->PaymentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bcrypt   (src/.../user.entity.ts)\n                        \n                        \n                            bcrypt   (src/.../user.service.ts)\n                        \n                        \n                            SWAGGER_CONFIG   (src/.../swagger.config.ts)\n                        \n                        \n                            TypeOrmConfig   (src/.../typeorm.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/Entities/user.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bcrypt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('bcryptjs')\n                    \n                \n\n            \n                \n                    This is used to maintain password strong\n\n                \n            \n\n        \n    \n\n    src/Modules/user/user.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bcrypt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('bcryptjs')\n                    \n                \n\n            \n                \n                    This bcrypt is used to hash the password\n\n                \n            \n\n        \n    \n\n    src/Config/Swagger/swagger.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SWAGGER_CONFIG\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SwaggerConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  Title: 'Food App',\n  Description: 'All Food items are avaliable here',\n  Version: '1.0',\n  Tags: ['Template']\n}\n                    \n                \n\n            \n                \n                    This variable is used to configure the swagger related info\n\n                \n            \n\n        \n    \n\n    src/Common/TypeOrm/typeorm.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TypeOrmConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TypeOrmInterface\n\n                    \n                \n                \n                    \n                        Default value : {\n  host: 'localhost',\n  port: 3306,\n  username: 'root',\n  password: 'root',\n  database: 'foodapp'\n}\n                    \n                \n\n            \n                \n                    all typeOrm configurations are avaliable here\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
